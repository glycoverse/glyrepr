[{"path":[]},{"path":"https://glycoverse.github.io/glyrepr/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://glycoverse.github.io/glyrepr/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://glycoverse.github.io/glyrepr/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://glycoverse.github.io/glyrepr/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://glycoverse.github.io/glyrepr/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement codeofconduct@posit.co. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://glycoverse.github.io/glyrepr/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://glycoverse.github.io/glyrepr/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://glycoverse.github.io/glyrepr/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://glycoverse.github.io/glyrepr/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://glycoverse.github.io/glyrepr/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://glycoverse.github.io/glyrepr/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://glycoverse.github.io/glyrepr/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to glyrepr","title":"Contributing to glyrepr","text":"outlines propose change glyrepr. detailed discussion contributing tidyverse packages, please see development contributing guide code review principles.","code":""},{"path":"https://glycoverse.github.io/glyrepr/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to glyrepr","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://glycoverse.github.io/glyrepr/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to glyrepr","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed). See guide create great issue advice.","code":""},{"path":"https://glycoverse.github.io/glyrepr/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to glyrepr","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"glycoverse/glyrepr\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"https://glycoverse.github.io/glyrepr/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to glyrepr","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://glycoverse.github.io/glyrepr/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to glyrepr","text":"Please note glyrepr project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://glycoverse.github.io/glyrepr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 glyrepr authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://glycoverse.github.io/glyrepr/SUPPORT.html","id":null,"dir":"","previous_headings":"","what":"Getting help with glyrepr","title":"Getting help with glyrepr","text":"Thanks using glyrepr! filing issue, places explore pieces put together make process smooth possible.","code":""},{"path":"https://glycoverse.github.io/glyrepr/SUPPORT.html","id":"make-a-reprex","dir":"","previous_headings":"","what":"Make a reprex","title":"Getting help with glyrepr","text":"Start making minimal reproducible example using reprex package. haven’t heard used reprex , ’re treat! Seriously, reprex make R-question-asking endeavors easier (pretty incredible ROI five ten minutes ’ll take learn ’s ). additional reprex pointers, check Get help! section tidyverse site.","code":""},{"path":"https://glycoverse.github.io/glyrepr/SUPPORT.html","id":"where-to-ask","dir":"","previous_headings":"","what":"Where to ask?","title":"Getting help with glyrepr","text":"Armed reprex, next step figure ask. ’s question: start community.rstudio.com, /StackOverflow. people answer questions. ’s bug: ’re right place, file issue. ’re sure: let community help figure ! problem bug feature request, can easily return report . opening new issue, sure search issues pull requests make sure bug hasn’t reported /already fixed development version. default, search pre-populated :issue :open. can edit qualifiers (e.g. :pr, :closed) needed. example, ’d simply remove :open search issues repo, open closed.","code":""},{"path":"https://glycoverse.github.io/glyrepr/SUPPORT.html","id":"what-happens-next","dir":"","previous_headings":"","what":"What happens next?","title":"Getting help with glyrepr","text":"efficient possible, development tidyverse packages tends bursty, shouldn’t worry don’t get immediate response. Typically don’t look repo sufficient quantity issues accumulates, ’s burst intense activity focus efforts. makes development efficient avoids expensive context switching problems, cost taking longer get back . process makes good reprex particularly important might multiple months initial report start working . can’t reproduce bug, can’t fix !","code":""},{"path":"https://glycoverse.github.io/glyrepr/articles/glycan-graph.html","id":"the-hidden-graph-universe-of-glycans","dir":"Articles","previous_headings":"","what":"The Hidden Graph Universe of Glycans 🌌","title":"Glycan Graphs: The Network Behind Your Sugar Structures 🕸️","text":"Think glycans nature’s social networks – ’re naturally represented directed graphs, specifically outwardly-directed trees sugar “talks” neighbors structured way. Behind scenes, every glycan_structure() object actually powered igraph object. beauty glycoverse users can work intuitive concept “glycan structures” without getting lost graph theory weeds 🌾. power users want peek hood – guide treasure map! 🗺️","code":"library(glyrepr)"},{"path":"https://glycoverse.github.io/glyrepr/articles/glycan-graph.html","id":"whats-actually-stored-in-memory","dir":"Articles","previous_headings":"","what":"What’s Actually Stored in Memory? 🧠","title":"Glycan Graphs: The Network Behind Your Sugar Structures 🕸️","text":"Representing glycan computer memory like trying pack month-long trip carry-bag – need decide ’s absolutely essential! glycan tons information: linear oriented C-atoms, basetype (stereochemical skeleton), substituents, configuration, anomeric center, ring size, linkage positions… list goes ! 📝 packages (like Python’s glypy) take “pack everything” approach 🎒, storing every tiny detail. comprehensive strategy fantastic specialized tasks like MS/MS spectra simulation, can overkill everyday omics research. glyrepr takes minimalist approach ✨. philosophy: can derive IUPAC-condensed text representation, ’ll store . Everything else? let go. means skip details like configuration ring size – ’s usually just fine, since common carbohydrates predictable properties anyway. 💡 Pro Tip: Want master IUPAC-condensed notation? Check comprehensive guide.","code":""},{"path":"https://glycoverse.github.io/glyrepr/articles/glycan-graph.html","id":"extracting-the-graph-show-me-the-network","dir":"Articles","previous_headings":"","what":"Extracting the Graph: Show Me the Network! 🔍","title":"Glycan Graphs: The Network Behind Your Sugar Structures 🕸️","text":"can’t just throw igraph functions glycan_structure() object – speak different languages! Instead, let’s extract underlying graph using get_structure_graphs(): Let’s decode ’re seeing 🕵️: First line: Directed Named (“DN”) graph 5 vertices (sugar units) 4 edges (bonds). Think family tree 5 people 4 relationships. Graph-level attributes: anomer 🔄: anomeric configuration reducing end (“root” tree) Vertex attributes (sugar units ): name 🏷️: Unique ID sugar (like social security numbers) mono 🍬: actual sugar type (“Hex”, “HexNAc”, etc.) sub ⚗️: chemical decorations attached sugar Edge attributes (connections): linkage 🔗: sugars connected (including bond positions configurations) Connection pattern: “1->2” means vertex 1 connects vertex 2. treat bonds arrows pointing core toward branches (even though real glycosidic bonds aren’t actually directional – just makes coding easier! 😅) Want see visually? igraph got covered:","code":"glycan <- n_glycan_core() graph <- get_structure_graphs(glycan) graph #> IGRAPH 7cfa7ed DN-- 5 4 --  #> + attr: anomer (g/c), name (v/c), mono (v/c), sub (v/c), linkage (e/c) #> + edges from 7cfa7ed (vertex names): #> [1] 3->1 3->2 4->3 5->4 plot(graph)"},{"path":[]},{"path":"https://glycoverse.github.io/glyrepr/articles/glycan-graph.html","id":"vertices-meet-your-sugar-cast","dir":"Articles","previous_headings":"Deep Dive: Dissecting the Components 🔬","what":"Vertices: Meet Your Sugar Cast 🎭","title":"Glycan Graphs: The Network Behind Your Sugar Structures 🕸️","text":"vertex represents monosaccharide three key properties: 🏷️ Names (Unique IDs): auto-generated identifiers – usually simple integers, anything long ’re unique: 🍬 Monosaccharides (Star Players): IUPAC-condensed names like “Hex”, “HexNAc”, “Glc”, “GlcNAc”. Think “job titles” sugars: 📚 Reference: complete cast available monosaccharides, check SNFG notation run available_monosaccharides(). ⚗️ Substituents (Accessories): Chemical decorations like “” (methyl), “Ac” (acetyl), “S” (sulfate), etc. Position matters! “3Me” = methyl position 3, “?S” = sulfate unknown position: Got multiple decorations? problem! ’re comma-separated sorted position:","code":"igraph::V(graph)$name #> [1] \"1\" \"2\" \"3\" \"4\" \"5\" igraph::V(graph)$mono #> [1] \"Man\"    \"Man\"    \"Man\"    \"GlcNAc\" \"GlcNAc\" igraph::V(graph)$sub #> [1] \"\" \"\" \"\" \"\" \"\" glycan2 <- as_glycan_structure(\"Glc3Me6S(a1-\") graph2 <- get_structure_graphs(glycan2) igraph::V(graph2)$sub #> [1] \"3Me,6S\""},{"path":"https://glycoverse.github.io/glyrepr/articles/glycan-graph.html","id":"edges-the-relationship-status","dir":"Articles","previous_headings":"Deep Dive: Dissecting the Components 🔬","what":"Edges: The Relationship Status 💕","title":"Glycan Graphs: The Network Behind Your Sugar Structures 🕸️","text":"Edges represent glycosidic bonds simple powerful format: ’s real example “Gal” “” anomeric configuration, linking position 3 “GalNAc” position 1 “Gal”: 🤔 encode anomer info edges? debated ! might seem natural store vertices, thinking “Neu5Ac a2-3 linkage” flows better mentally matches IUPAC notation perfectly.","code":"<target anomeric config><target position> - <source position> glycan3 <- as_glycan_structure(\"Gal(a1-3)GalNAc(b1-\") graph3 <- get_structure_graphs(glycan3) igraph::E(graph3)$linkage #> [1] \"a1-3\""},{"path":"https://glycoverse.github.io/glyrepr/articles/glycan-graph.html","id":"graph-level-attributes-the-global-settings","dir":"Articles","previous_headings":"Deep Dive: Dissecting the Components 🔬","what":"Graph-Level Attributes: The Global Settings ⚙️","title":"Glycan Graphs: The Network Behind Your Sugar Structures 🕸️","text":"🔄 Anomer: anomeric configuration reducing end (“root” sugar doesn’t link anything else)","code":"graph$anomer #> [1] \"b1\""},{"path":[]},{"path":"https://glycoverse.github.io/glyrepr/articles/glycan-graph.html","id":"unleash-the-power-of-igraph","dir":"Articles","previous_headings":"Now for the Fun Part: What Can You Do? 🎉","what":"Unleash the Power of igraph 💪","title":"Glycan Graphs: The Network Behind Your Sugar Structures 🕸️","text":"understand graph structure, entire igraph universe opens ! Example 1: Count branched structures (sugars multiple children): Example 2: Explore structure breadth-first search:","code":"sum(igraph::degree(graph, mode = \"out\") > 1) #> [1] 1 bfs_result <- igraph::bfs(graph, root = 1, mode = \"out\") bfs_result$order #> + 5/5 vertices, named, from 7cfa7ed: #> [1] 1 2 3 4 5"},{"path":"https://glycoverse.github.io/glyrepr/articles/glycan-graph.html","id":"level-up-with-smap-functions","dir":"Articles","previous_headings":"Now for the Fun Part: What Can You Do? 🎉","what":"Level Up with smap Functions 🚀","title":"Glycan Graphs: The Network Behind Your Sugar Structures 🕸️","text":"Working multiple glycans? use purrr: glyrepr’s smap functions way elegant: real magic ✨ smap functions intelligence duplicates. Real datasets often many identical structures, smap optimizes processing unique structures , efficiently expanding results back original dimensions. 📖 Learn : Dive deeper smap wizardry dedicated vignette.","code":"library(purrr)  glycans <- c(n_glycan_core(), o_glycan_core_1(), o_glycan_core_2()) graphs <- get_structure_graphs(glycans)  # Extract graphs first map_int(graphs, ~ igraph::vcount(.x))    # Then analyze #> [1] 5 2 3 smap_int(glycans, ~ igraph::vcount(.x))  # Direct analysis - no intermediate step! #> [1] 5 2 3"},{"path":"https://glycoverse.github.io/glyrepr/articles/glycan-graph.html","id":"motif-hunting-with-glymotif","dir":"Articles","previous_headings":"Now for the Fun Part: What Can You Do? 🎉","what":"Motif Hunting with glymotif 🔍","title":"Glycan Graphs: The Network Behind Your Sugar Structures 🕸️","text":"One exciting applications identifying biologically meaningful motifs (functional substructures). glymotif package, built graph foundation, specializes exactly task. 🎯 Get Started: Check glymotif introduction start motif hunting adventure!","code":""},{"path":"https://glycoverse.github.io/glyrepr/articles/glycan-graph.html","id":"wrapping-up-your-graph-journey-continues","dir":"Articles","previous_headings":"","what":"Wrapping Up: Your Graph Journey Continues 🎯","title":"Glycan Graphs: The Network Behind Your Sugar Structures 🕸️","text":"’ve just unlocked graph-powered engine behind glyrepr! now understand: 🏗️ glycan structures map directed graphs 📊 information stored (’s deliberately omitted) 🔧 extract manipulate underlying graphs 🚀 leverage igraph, smap, glymotif powerful analyses graph representation might seem complex first, ’s solid foundation enables sophisticated glycan analysis capabilities glycoverse. Now go forth explore glycan networks! 🌟","code":""},{"path":"https://glycoverse.github.io/glyrepr/articles/glyrepr.html","id":"quick-start-what-are-we-talking-about","dir":"Articles","previous_headings":"","what":"Quick Start: What Are We Talking About?","title":"Getting Started with glyrepr","text":"dive , let’s establish vocabulary. Don’t worry — ’s simpler sounds! 🔍 Pro tip: distinguish generic sugars (like mystery boxes labeled “Hex”) concrete sugars (like specific boxes labeled “Galactose”).","code":""},{"path":"https://glycoverse.github.io/glyrepr/articles/glyrepr.html","id":"part-1-compositions-the-easy-start","dir":"Articles","previous_headings":"","what":"Part 1: Compositions — The Easy Start","title":"Getting Started with glyrepr","text":"Let’s start something straightforward: glycan compositions. Think ingredient lists favorite recipes.","code":""},{"path":"https://glycoverse.github.io/glyrepr/articles/glyrepr.html","id":"creating-your-first-compositions","dir":"Articles","previous_headings":"Part 1: Compositions — The Easy Start","what":"Creating Your First Compositions","title":"Getting Started with glyrepr","text":"three ways create compositions, superpower: Method 1: Direct Approach Method 2: Programmatic Way Method 3: Parser","code":"# Just tell R what you have glycan_composition(c(Hex = 5, HexNAc = 2), c(Gal = 1, GalNAc = 1)) #> <glycan_composition[2]> #> [1] Hex(5)HexNAc(2) #> [2] Gal(1)GalNAc(1) # Perfect when you're processing data from files or databases comp_list <- list(c(Hex = 5, HexNAc = 2), c(Gal = 1, GalNAc = 1)) as_glycan_composition(comp_list) #> <glycan_composition[2]> #> [1] Hex(5)HexNAc(2) #> [2] Gal(1)GalNAc(1) # Copy-paste from your mass spec software? No problem! as_glycan_composition(c(\"Hex(5)HexNAc(2)\", \"Gal(1)GalNAc(1)\")) #> <glycan_composition[2]> #> [1] Hex(5)HexNAc(2) #> [2] Gal(1)GalNAc(1)"},{"path":"https://glycoverse.github.io/glyrepr/articles/glyrepr.html","id":"the-magic-of-colors","dir":"Articles","previous_headings":"Part 1: Compositions — The Easy Start","what":"The Magic of Colors 🌈","title":"Getting Started with glyrepr","text":"’s something cool: run examples R console, ’ll see concrete monosaccharides (like Gal GalNAc) displayed beautiful colors! follow SNFG standard — universal “color code” glycans. Think glycan rainbow 🌈.","code":""},{"path":"https://glycoverse.github.io/glyrepr/articles/glyrepr.html","id":"smart-counting-with-count_mono","dir":"Articles","previous_headings":"Part 1: Compositions — The Easy Start","what":"Smart Counting with count_mono()","title":"Getting Started with glyrepr","text":"Now ’s glyrepr shows intelligence: Notice count_mono() smart enough know galactose mannose hexoses? ’s power understanding glycan hierarchies!","code":"comp <- glycan_composition(   c(Hex = 5, HexNAc = 2),          # generic sugars   c(Gal = 1, Man = 1, GalNAc = 1)  # concrete sugars )  # How many galactose residues? count_mono(comp, \"Gal\") #> [1] NA  1  # How many hexose residues? (This includes Gal and Man!) count_mono(comp, \"Hex\") #> [1] 5 2"},{"path":"https://glycoverse.github.io/glyrepr/articles/glyrepr.html","id":"part-2-structures-where-the-magic-happens","dir":"Articles","previous_headings":"","what":"Part 2: Structures — Where the Magic Happens","title":"Getting Started with glyrepr","text":"Compositions nice, structures glyrepr truly shines. like going knowing ingredients understanding actual recipe cooking method.","code":""},{"path":"https://glycoverse.github.io/glyrepr/articles/glyrepr.html","id":"your-first-glycan-structures","dir":"Articles","previous_headings":"Part 2: Structures — Where the Magic Happens","what":"Your First Glycan Structures","title":"Getting Started with glyrepr","text":"Let’s work real glycan structures. strings called “IUPAC-condensed” glycan text representations. might look cryptic, ’re actually quite readable get hang . learn , check article.","code":"iupacs <- c(   \"Man(a1-3)[Man(a1-6)]Man(b1-4)GlcNAc(b1-4)GlcNAc(b1-\",  # The famous N-glycan core   \"Gal(b1-3)GalNAc(a1-\",                                  # O-glycan core 1   \"Gal(b1-3)[GlcNAc(b1-6)]GalNAc(a1-\",                    # O-glycan core 2   \"Man(a1-3)[Man(a1-6)]Man(a1-3)[Man(a1-6)]Man(a1-\",      # A branched mannose tree   \"GlcNAc6Ac(b1-4)Glc3Me(a1-\"                             # With some decorations )  struc <- as_glycan_structure(iupacs) struc #> <glycan_structure[5]> #> [1] Man(a1-3)[Man(a1-6)]Man(b1-4)GlcNAc(b1-4)GlcNAc(b1- #> [2] Gal(b1-3)GalNAc(a1- #> [3] Gal(b1-3)[GlcNAc(b1-6)]GalNAc(a1- #> [4] Man(a1-3)[Man(a1-6)]Man(a1-3)[Man(a1-6)]Man(a1- #> [5] GlcNAc6Ac(b1-4)Glc3Me(a1- #> # Unique structures: 5"},{"path":"https://glycoverse.github.io/glyrepr/articles/glyrepr.html","id":"the-secret-sauce-unique-structure-optimization","dir":"Articles","previous_headings":"Part 2: Structures — Where the Magic Happens","what":"The Secret Sauce: Unique Structure Optimization","title":"Getting Started with glyrepr","text":"’s glyrepr gets really clever. Notice “# Unique structures: 5” message? isn’t just informational — ’s key lightning-fast performance. Let’s see optimization action: Still showing “# Unique structures: 5”! means glyrepr storing 5 unique graphs internally, 5,000. like smart library system stores one copy book, matter many people want read .","code":"# Create a big dataset with lots of repetition large_struc <- rep(struc, 1000)  # 5,000 structures total large_struc #> <glycan_structure[5000]> #> [1] Man(a1-3)[Man(a1-6)]Man(b1-4)GlcNAc(b1-4)GlcNAc(b1- #> [2] Gal(b1-3)GalNAc(a1- #> [3] Gal(b1-3)[GlcNAc(b1-6)]GalNAc(a1- #> [4] Man(a1-3)[Man(a1-6)]Man(a1-3)[Man(a1-6)]Man(a1- #> [5] GlcNAc6Ac(b1-4)Glc3Me(a1- #> [6] Man(a1-3)[Man(a1-6)]Man(b1-4)GlcNAc(b1-4)GlcNAc(b1- #> [7] Gal(b1-3)GalNAc(a1- #> [8] Gal(b1-3)[GlcNAc(b1-6)]GalNAc(a1- #> [9] Man(a1-3)[Man(a1-6)]Man(a1-3)[Man(a1-6)]Man(a1- #> [10] GlcNAc6Ac(b1-4)Glc3Me(a1- #> ... (4990 more not shown) #> # Unique structures: 5"},{"path":"https://glycoverse.github.io/glyrepr/articles/glyrepr.html","id":"performance-that-will-blow-your-mind","dir":"Articles","previous_headings":"Part 2: Structures — Where the Magic Happens","what":"Performance That Will Blow Your Mind 🚀","title":"Getting Started with glyrepr","text":"Let’s put test: Mind = blown! 🤯 performance nearly identical glyrepr processes unique structure , cleverly expands results.","code":"library(tictoc)  tic(\"Converting 5 structures\") result_small <- convert_to_generic(struc) toc() #> Converting 5 structures: 0.036 sec elapsed  tic(\"Converting 5,000 structures\") result_large <- convert_to_generic(large_struc) toc() #> Converting 5,000 structures: 0.038 sec elapsed"},{"path":"https://glycoverse.github.io/glyrepr/articles/glyrepr.html","id":"structure-manipulation-tools","dir":"Articles","previous_headings":"Part 2: Structures — Where the Magic Happens","what":"Structure Manipulation Tools","title":"Getting Started with glyrepr","text":"glyrepr comes several handy tools structure manipulation: Strip away connections: Remove decorations:","code":"remove_linkages(struc) #> <glycan_structure[5]> #> [1] Man(??-?)[Man(??-?)]Man(??-?)GlcNAc(??-?)GlcNAc(??- #> [2] Gal(??-?)GalNAc(??- #> [3] Gal(??-?)[GlcNAc(??-?)]GalNAc(??- #> [4] Man(??-?)[Man(??-?)]Man(??-?)[Man(??-?)]Man(??- #> [5] GlcNAc6Ac(??-?)Glc3Me(??- #> # Unique structures: 5 # Let's look at our decorated structure first struc[5] #> <glycan_structure[1]> #> [1] GlcNAc6Ac(b1-4)Glc3Me(a1- #> # Unique structures: 1  # Now remove the decorations (6Ac and 3Me) remove_substituents(struc[5]) #> <glycan_structure[1]> #> [1] GlcNAc(b1-4)Glc(a1- #> # Unique structures: 1"},{"path":[]},{"path":"https://glycoverse.github.io/glyrepr/articles/glyrepr.html","id":"from-structure-to-composition","dir":"Articles","previous_headings":"Part 3: Conversions and Integrations","what":"From Structure to Composition","title":"Getting Started with glyrepr","text":"Ever wondered ’s actually complex structures? Easy:","code":"comp <- as_glycan_composition(struc) comp #> <glycan_composition[5]> #> [1] Man(3)GlcNAc(2) #> [2] Gal(1)GalNAc(1) #> [3] Gal(1)GlcNAc(1)GalNAc(1) #> [4] Man(5) #> [5] Glc(1)GlcNAc(1)Me(1)Ac(1)"},{"path":"https://glycoverse.github.io/glyrepr/articles/glyrepr.html","id":"back-to-strings","dir":"Articles","previous_headings":"Part 3: Conversions and Integrations","what":"Back to Strings","title":"Getting Started with glyrepr","text":"Need export data use elsewhere?","code":"# Get the original string representations as.character(struc) #> [1] \"Man(a1-3)[Man(a1-6)]Man(b1-4)GlcNAc(b1-4)GlcNAc(b1-\" #> [2] \"Gal(b1-3)GalNAc(a1-\"                                 #> [3] \"Gal(b1-3)[GlcNAc(b1-6)]GalNAc(a1-\"                   #> [4] \"Man(a1-3)[Man(a1-6)]Man(a1-3)[Man(a1-6)]Man(a1-\"     #> [5] \"GlcNAc6Ac(b1-4)Glc3Me(a1-\" as.character(comp) #> [1] \"Man(3)GlcNAc(2)\"           \"Gal(1)GalNAc(1)\"           #> [3] \"Gal(1)GlcNAc(1)GalNAc(1)\"  \"Man(5)\"                    #> [5] \"Glc(1)GlcNAc(1)Me(1)Ac(1)\""},{"path":"https://glycoverse.github.io/glyrepr/articles/glyrepr.html","id":"playing-nice-with-the-tidyverse","dir":"Articles","previous_headings":"Part 3: Conversions and Integrations","what":"Playing Nice with the Tidyverse","title":"Getting Started with glyrepr","text":"glyrepr objects first-class citizens tidyverse:","code":"suppressPackageStartupMessages(library(tibble)) suppressPackageStartupMessages(library(dplyr))  df <- tibble(   id = seq_along(struc),   structures = struc,   names = c(\"N-glycan core\", \"Core 1\", \"Core 2\", \"Branched Man\", \"Decorated\") )  df %>%    mutate(n_man = count_mono(structures, \"Man\")) %>%   filter(n_man > 1) #> # A tibble: 2 × 4 #>      id structures                                          names         n_man #>   <int> <struct>                                            <chr>         <int> #> 1     1 Man(a1-3)[Man(a1-6)]Man(b1-4)GlcNAc(b1-4)GlcNAc(b1- N-glycan core     3 #> 2     4 Man(a1-3)[Man(a1-6)]Man(a1-3)[Man(a1-6)]Man(a1-     Branched Man      5"},{"path":"https://glycoverse.github.io/glyrepr/articles/glyrepr.html","id":"whats-next","dir":"Articles","previous_headings":"","what":"What’s Next?","title":"Getting Started with glyrepr","text":"Congratulations! ’ve just learned fundamentals glycan representation R. ’s can explore next: 🔬 Advanced analysis: Check “Power User Guide: Efficient Glycan Manipulation” vignette power-user features 🧬 Motif searching: Try glymotif package finding patterns glycan structures 📊 Visualization: Explore glycan visualization packages glycoverse glycoverse oyster! 🦪","code":""},{"path":"https://glycoverse.github.io/glyrepr/articles/glyrepr.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session Information","title":"Getting Started with glyrepr","text":"","code":"sessionInfo() #> R version 4.5.1 (2025-06-13) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 24.04.3 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.26.so;  LAPACK version 3.12.0 #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] dplyr_1.1.4        tibble_3.3.0       tictoc_1.2.1       glyrepr_0.7.4.9000 #>  #> loaded via a namespace (and not attached): #>  [1] jsonlite_2.0.0    compiler_4.5.1    tidyselect_1.2.1  stringr_1.5.2     #>  [5] jquerylib_0.1.4   systemfonts_1.2.3 textshaping_1.0.3 yaml_2.3.10       #>  [9] fastmap_1.2.0     R6_2.6.1          generics_0.1.4    igraph_2.1.4      #> [13] knitr_1.50        backports_1.5.0   checkmate_2.3.3   rstackdeque_1.1.1 #> [17] desc_1.4.3        bslib_0.9.0       pillar_1.11.1     rlang_1.1.6       #> [21] utf8_1.2.6        cachem_1.1.0      stringi_1.8.7     xfun_0.53         #> [25] fs_1.6.6          sass_0.4.10       cli_3.6.5         pkgdown_2.1.3     #> [29] magrittr_2.0.4    digest_0.6.37     lifecycle_1.0.4   vctrs_0.6.5       #> [33] evaluate_1.0.5    glue_1.8.0        ragg_1.5.0        rmarkdown_2.29    #> [37] purrr_1.1.0       tools_4.5.1       pkgconfig_2.0.3   htmltools_0.5.8.1"},{"path":"https://glycoverse.github.io/glyrepr/articles/iupac.html","id":"the-tower-of-babel-why-so-many-glycan-formats","dir":"Articles","previous_headings":"","what":"The Tower of Babel: Why So Many Glycan Formats? 🏗️","title":"Decoding Glycans: Your Guide to IUPAC-Condensed Format","text":"Picture : ’re international conference, everyone speaking different language. ’s exactly happened glycomics world! Different communities developed ways describe glycans, optimized specific needs. Let’s take famous N-glycan example:  molecule, many faces: Human-Friendly Version (IUPAC-condensed): Chemistry Professor’s Dream (IUPAC-extended): Computer’s Favorite (WURCS): Chemical Database’s Language (InChI): Feeling dizzy yet? 😵‍💫 ’s completely normal! format serves purpose: 🧑‍🔬 IUPAC formats: Perfect humans read understand 🤖 WURCS/GlycoCT: Optimized computers databases 🔗 Semantic formats: Great linking data across platforms ⚗️ Chemical formats: Ideal rigorous chemical analysis","code":"Neu5Ac(a2-3)Gal(b1-4)GlcNAc(b1-2)Man(a1-3)[Neu5Ac(a2-3)Gal(b1-4)GlcNAc(b1-2)Man(a1-6)]Man(b1-4)GlcNAc(b1-4)[Fuc(a1-6)]GlcNAc(b1- α-D-Neup5Ac-(2→3)-β-D-Galp-(1→4)-β-D-GlcpNAc-(1→2)-α-D-Manp-(1→3)[α-D-Neup5Ac-(2→3)-β-D-Galp-(1→4)-β-D-GlcpNAc-(1→2)-α-D-Manp-(1→6)]-β-D-Manp-(1→4)-β-D-GlcpNAc-(1→4)[α-L-Fucp-(1→6)]-β-D-GlcpNAc-(1→ WURCS=2.0/6,12,11/[a2122h-1b_1-5_2*NCC/3=O][a1122h-1b_1-5][a1122h-1a_1-5][a2112h-1b_1-5][Aad21122h-2a_2-6_5*NCC/3=O][a1221m-1a_1-5]/1-1-2-3-1-4-5-3-1-4-5-6/a4-b1_a6-l1_b4-c1_c3-d1_c6-h1_d2-e1_e4-f1_f3-g2_h2-i1_i4-j1_j3-k2 InChI=1S/C90H148N6O66/c1-21-47(116)59(128)62(131)81(142-21)140-20-40-69(55(124)43(77(135)143-40)93-24(4)108)152-78-44(94-25(5)109)56(125)66(36(16-103)148-78)153-82-63(132)72(156-86-76(61(130)51(120)33(13-100)147-86)158-80-46(96-27(7)111)58(127)68(38(18-105)150-80)155-84-65(134)74(53(122)35(15-102)145-84)162-90(88(138)139)9-29(113)42(92-23(3)107)71(160-90)49(118)31(115)11-98)54(123)39(151-82)19-141-85-75(60(129)50(119)32(12-99)146-85)157-79-45(95-26(6)110)57(126)67(37(17-104)149-79)154-83-64(133)73(52(121)34(14-101)144-83)161-89(87(136)137)8-28(112)41(91-22(2)106)70(159-89)48(117)30(114)10-97/h21,28-86,97-105,112-135H,8-20H2,1-7H3,(H,91,106)(H,92,107)(H,93,108)(H,94,109)(H,95,110)(H,96,111)(H,136,137)(H,138,139)/t21-,28-,29-,30+,31+,32+,33+,34+,35+,36+,37+,38+,39+,40+,41+,42+,43+,44+,45+,46+,47+,48+,49+,50+,51+,52-,53-,54+,55+,56+,57+,58+,59+,60-,61-,62-,63-,64+,65+,66+,67+,68+,69+,70+,71+,72-,73-,74-,75-,76-,77+,78-,79-,80-,81+,82-,83-,84-,85-,86+,89-,90-/m0/s1"},{"path":"https://glycoverse.github.io/glyrepr/articles/iupac.html","id":"why-we-chose-iupac-condensed-for-glyrepr","dir":"Articles","previous_headings":"","what":"Why We Chose IUPAC-Condensed for glyrepr 🎯","title":"Decoding Glycans: Your Guide to IUPAC-Condensed Format","text":"building glycoverse, faced classic engineering decision: format “native language”? much deliberation (probably much coffee ☕), settled IUPAC-condensed hits sweet spot: ✅ Human-readable: can actually understand ’re looking ✅ Information-rich: Contains everything need glycomics analyses ✅ Widely used: glycomics community knows loves ✅ Flexible: Works simple complex structures Think “Python glycan formats” — powerful yet approachable!","code":""},{"path":[]},{"path":"https://glycoverse.github.io/glyrepr/articles/iupac.html","id":"step-1-the-building-blocks-monosaccharide-symbols","dir":"Articles","previous_headings":"Mastering IUPAC-Condensed: A Step-by-Step Journey 🗺️","what":"Step 1: The Building Blocks — Monosaccharide Symbols","title":"Decoding Glycans: Your Guide to IUPAC-Condensed Format","text":"Every glycan built monosaccharide units, IUPAC gives one memorable abbreviation: 💡 Pro tip: Check SNFG website complete symbol library — ’s like cheat sheet glycan notation!","code":""},{"path":"https://glycoverse.github.io/glyrepr/articles/iupac.html","id":"step-2-the-decorations-substituents","dir":"Articles","previous_headings":"Mastering IUPAC-Condensed: A Step-by-Step Journey 🗺️","what":"Step 2: The Decorations — Substituents","title":"Decoding Glycans: Your Guide to IUPAC-Condensed Format","text":"Just like proteins can post-translational modifications, glycans can decorations! called substituents. Think substituents “accessories” monosaccharides: Neu5Ac9Ac = sialic acid wearing extra acetyl group position 9 Glc3Me = glucose sporting methyl group position 3 GlcNAc6Ac = N-acetylglucosamine bonus acetylation position 6 Format rule: Position number + Modification type Example: 6Ac = “acetyl group position 6”","code":""},{"path":"https://glycoverse.github.io/glyrepr/articles/iupac.html","id":"step-3-the-connections-linkage-information","dir":"Articles","previous_headings":"Mastering IUPAC-Condensed: A Step-by-Step Journey 🗺️","what":"Step 3: The Connections — Linkage Information","title":"Decoding Glycans: Your Guide to IUPAC-Condensed Format","text":"magic happens! 🪄 Linkages tell us monosaccharides connected . anatomy linkage: Let’s decode Neu5Ac(a2-3)Gal: Neu5Ac connected Gal anomeric carbon Neu5Ac alpha configuration () connection position 2 Neu5Ac position 3 Gal Real-world analogy: Think like describing LEGO blocks connect: “red block connects 2nd peg (position) 3rd socket blue block.” life gets uncertain 🤷‍♀️: Sometimes don’t know details, use ? wildcard: a2-? = “know ’s alpha-2, sure connects” ??-3 = “connects position 3, anomeric info unclear”","code":"MonosaccharideA(anomeric_config + anomeric_position - target_position)MonosaccharideB"},{"path":"https://glycoverse.github.io/glyrepr/articles/iupac.html","id":"step-4-the-architecture-topological-structure","dir":"Articles","previous_headings":"Mastering IUPAC-Condensed: A Step-by-Step Journey 🗺️","what":"Step 4: The Architecture — Topological Structure","title":"Decoding Glycans: Your Guide to IUPAC-Condensed Format","text":"Now comes fun part: turning branched tree structure linear string! ’s like giving directions complex building. golden rules: Find longest backbone (like main hallway) Everything else branch (like rooms hallway) Branches go square brackets [] Write branches just monosaccharide connect ","code":""},{"path":"https://glycoverse.github.io/glyrepr/articles/iupac.html","id":"example-1-a-simple-o-glycan","dir":"Articles","previous_headings":"Mastering IUPAC-Condensed: A Step-by-Step Journey 🗺️ > Step 4: The Architecture — Topological Structure","what":"Example 1: A Simple O-Glycan 🌿","title":"Decoding Glycans: Your Guide to IUPAC-Condensed Format","text":"Step--step construction: Identify main chain: Gal → GlcNAc → GalNAc Add linkage info: Gal(b1-4)GlcNAc(b1-6)GalNAc(a1- Spot branch: bottom Gal connects GalNAc Insert branch: Gal(b1-4)GlcNAc(b1-6)[Gal(b1-3)]GalNAc(a1- Final result:","code":"Gal(b1-4)GlcNAc(b1-6)[Gal(b1-3)]GalNAc(a1-"},{"path":"https://glycoverse.github.io/glyrepr/articles/iupac.html","id":"example-2-the-famous-n-glycan-core","dir":"Articles","previous_headings":"Mastering IUPAC-Condensed: A Step-by-Step Journey 🗺️ > Step 4: The Architecture — Topological Structure","what":"Example 2: The Famous N-Glycan Core 🌟","title":"Decoding Glycans: Your Guide to IUPAC-Condensed Format","text":"plot twist: Two chains equal length! one becomes main chain? IUPAC’s tie-breaker rule: chains equal, choose one creates branches lower position numbers. Analysis: - Option : Man(a1-6) branch → position 6 - Option B: Man(a1-3) branch → position 3 Winner: Option B (lower number = 3) Final result:","code":"Man(a1-3)[Man(a1-6)]Man(b1-4)GlcNAc(b1-4)GlcNAc(b1-"},{"path":"https://glycoverse.github.io/glyrepr/articles/iupac.html","id":"step-5-the-root-mystery-anomeric-information","dir":"Articles","previous_headings":"Mastering IUPAC-Condensed: A Step-by-Step Journey 🗺️","what":"Step 5: The Root Mystery — Anomeric Information","title":"Decoding Glycans: Your Guide to IUPAC-Condensed Format","text":"might wonder: “last monosaccharide end (b1- instead complete linkage?” Great question! 🤔 root monosaccharide (rightmost) doesn’t connect anything , anomeric carbon “free.” format (xy- tells us anomeric state without target. Simplification shortcut: common monosaccharides, can often omit anomeric info entirely:","code":"Man(a1-3)[Man(a1-6)]Man(b1-4)GlcNAc(b1-4)GlcNAc"},{"path":"https://glycoverse.github.io/glyrepr/articles/iupac.html","id":"put-your-skills-to-the-test","dir":"Articles","previous_headings":"","what":"Put Your Skills to the Test! 🧪","title":"Decoding Glycans: Your Guide to IUPAC-Condensed Format","text":"Ready become IUPAC-condensed master? Time hands-practice! Challenge: Look complex N-glycan beginning article try write IUPAC-condensed string . Don’t peek answer! Hint: Start identifying main chain, work branches one one. Test answer:","code":"# Try your hand-written string here! my_attempt <- \"Your_IUPAC_string_here\"  # This will tell you if it's valid tryCatch({   result <- as_glycan_structure(my_attempt)   cat(\"🎉 Congratulations! Your IUPAC string is valid!\\n\")   print(result) }, error = function(e) {   cat(\"🔧 Oops! There might be a small issue. Keep trying!\\n\")   cat(\"Error:\", e$message, \"\\n\") }) #> 🔧 Oops! There might be a small issue. Keep trying! #> Error: Could not parse IUPAC-condensed string: \"Your_IUPAC_string_here\""},{"path":"https://glycoverse.github.io/glyrepr/articles/iupac.html","id":"congratulations-youre-now-glycan-literate","dir":"Articles","previous_headings":"","what":"Congratulations, You’re Now Glycan-Literate! 🎓","title":"Decoding Glycans: Your Guide to IUPAC-Condensed Format","text":"’ve just mastered one important skills computational glycomics: reading writing IUPAC-condensed notation. knowledge serve well explore glycoverse analyze glycan structures. ’ve learned: 🧬 different glycan formats exist use 🔤 decode monosaccharide symbols substituents 🔗 logic behind linkage notation 🌳 convert tree structures linear strings 🎯 art identifying main chains branches Next steps: Practice complex structures Explore glyrepr package functions Dive glycan analysis confidence! Happy glycan hunting! 🕵️‍♀️✨","code":""},{"path":"https://glycoverse.github.io/glyrepr/articles/iupac.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session Information","title":"Decoding Glycans: Your Guide to IUPAC-Condensed Format","text":"","code":"sessionInfo() #> R version 4.5.1 (2025-06-13) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 24.04.3 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.26.so;  LAPACK version 3.12.0 #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] glyrepr_0.7.4.9000 #>  #> loaded via a namespace (and not attached): #>  [1] vctrs_0.6.5       cli_3.6.5         knitr_1.50        rlang_1.1.6       #>  [5] xfun_0.53         stringi_1.8.7     textshaping_1.0.3 jsonlite_2.0.0    #>  [9] glue_1.8.0        htmltools_0.5.8.1 ragg_1.5.0        sass_0.4.10       #> [13] rmarkdown_2.29    evaluate_1.0.5    jquerylib_0.1.4   fastmap_1.2.0     #> [17] yaml_2.3.10       lifecycle_1.0.4   stringr_1.5.2     compiler_4.5.1    #> [21] fs_1.6.6          systemfonts_1.2.3 digest_0.6.37     R6_2.6.1          #> [25] pillar_1.11.1     magrittr_2.0.4    bslib_0.9.0       tools_4.5.1       #> [29] pkgdown_2.1.3     cachem_1.1.0      desc_1.4.3"},{"path":"https://glycoverse.github.io/glyrepr/articles/smap.html","id":"welcome-to-the-advanced-zone","dir":"Articles","previous_headings":"","what":"Welcome to the Advanced Zone! 🚀","title":"Power User Guide: Efficient Glycan Manipulation","text":"Ready unlock full potential glyrepr? vignette want peek hood master art efficient glycan computation. ’re writing custom functions glycan analysis building next great glycomics tool, ’re right place! Fair warning: guide assumes ’re comfortable R programming graph theory concepts. ’re just getting started, check “Getting Started glyrepr” vignette first.","code":"library(glyrepr)"},{"path":"https://glycoverse.github.io/glyrepr/articles/smap.html","id":"the-secret-superpower-unique-structure-optimization","dir":"Articles","previous_headings":"","what":"The Secret Superpower: Unique Structure Optimization","title":"Power User Guide: Efficient Glycan Manipulation","text":"dive smap functions, let’s understand exist ’re game-changing glycan analysis.","code":""},{"path":"https://glycoverse.github.io/glyrepr/articles/smap.html","id":"the-problem-glycan-computation-is-expensive","dir":"Articles","previous_headings":"The Secret Superpower: Unique Structure Optimization","what":"The Problem: Glycan Computation is Expensive 💸","title":"Power User Guide: Efficient Glycan Manipulation","text":"Working glycan structures means working graphs, graph operations computationally expensive. ’re analyzing thousands glycans large-scale study, becomes real bottleneck.","code":""},{"path":"https://glycoverse.github.io/glyrepr/articles/smap.html","id":"the-solution-work-smart-not-hard","dir":"Articles","previous_headings":"The Secret Superpower: Unique Structure Optimization","what":"The Solution: Work Smart, Not Hard 🧠","title":"Power User Guide: Efficient Glycan Manipulation","text":"glyrepr implements clever optimization called unique structure storage. Instead storing thousands identical graphs, stores unique ones keeps track original positions belong . Let’s see action: Notice magical “# Unique structures: 5”? ’s performance booster right ! Let’s verify optimization real:","code":"# Our test data: some common glycan structures iupacs <- c(   \"Man(a1-3)[Man(a1-6)]Man(b1-4)GlcNAc(b1-4)GlcNAc(b1-\",  # N-glycan core   \"Gal(b1-3)GalNAc(a1-\",                                    # O-glycan core 1   \"Gal(b1-3)[GlcNAc(b1-6)]GalNAc(a1-\",                     # O-glycan core 2   \"Man(a1-3)[Man(a1-6)]Man(a1-3)[Man(a1-6)]Man(a1-\",          # Branched mannose   \"GlcNAc6Ac(b1-4)Glc3Me(a1-\"                              # With decorations )  struc <- as_glycan_structure(iupacs)  # Now let's create a realistic dataset with lots of repetition large_struc <- rep(struc, 1000)  # 5,000 total structures large_struc #> <glycan_structure[5000]> #> [1] Man(a1-3)[Man(a1-6)]Man(b1-4)GlcNAc(b1-4)GlcNAc(b1- #> [2] Gal(b1-3)GalNAc(a1- #> [3] Gal(b1-3)[GlcNAc(b1-6)]GalNAc(a1- #> [4] Man(a1-3)[Man(a1-6)]Man(a1-3)[Man(a1-6)]Man(a1- #> [5] GlcNAc6Ac(b1-4)Glc3Me(a1- #> [6] Man(a1-3)[Man(a1-6)]Man(b1-4)GlcNAc(b1-4)GlcNAc(b1- #> [7] Gal(b1-3)GalNAc(a1- #> [8] Gal(b1-3)[GlcNAc(b1-6)]GalNAc(a1- #> [9] Man(a1-3)[Man(a1-6)]Man(a1-3)[Man(a1-6)]Man(a1- #> [10] GlcNAc6Ac(b1-4)Glc3Me(a1- #> ... (4990 more not shown) #> # Unique structures: 5 # Only 5 unique graphs are stored internally length(attr(large_struc, \"structures\")) #> [1] 5  # But we have 5,000 total elements length(large_struc) #> [1] 5000"},{"path":"https://glycoverse.github.io/glyrepr/articles/smap.html","id":"the-memory-savings-are-real","dir":"Articles","previous_headings":"The Secret Superpower: Unique Structure Optimization","what":"The Memory Savings Are Real","title":"Power User Guide: Efficient Glycan Manipulation","text":"80 kB vs 15 MB? ’s 200x memory efficiency! real magic happens computation speed…","code":"library(lobstr) obj_sizes(struc, large_struc) #> * 14.33 kB #> * 80.72 kB"},{"path":"https://glycoverse.github.io/glyrepr/articles/smap.html","id":"enter-the-smap-universe","dir":"Articles","previous_headings":"","what":"Enter the smap Universe 🌌","title":"Power User Guide: Efficient Glycan Manipulation","text":"Now ’s problem: try use regular lapply() purrr::map() functions glycan structures, ’ll hit wall: fail? purrr functions don’t understand internal structure optimization glycan_structure objects.","code":"# This won't work and will throw an error tryCatch(   purrr::map_int(large_struc, ~ igraph::vcount(.x)),   error = function(e) cat(\"💥 Error:\", rlang::cnd_message(e)) ) #> 💥 Error: ℹ In index: 1. #> Caused by error in `ensure_igraph()`: #> ! Must provide a graph object (provided wrong object type)."},{"path":"https://glycoverse.github.io/glyrepr/articles/smap.html","id":"the-smap-family-to-the-rescue","dir":"Articles","previous_headings":"Enter the smap Universe 🌌","what":"The smap Family to the Rescue!","title":"Power User Guide: Efficient Glycan Manipulation","text":"smap functions (think “structure map”) drop-replacements purrr functions glycan-aware. understand unique structure optimization work directly underlying graph objects. “s” stands “structure” — functions operate underlying igraph objects represent glycan structures.","code":"# This works beautifully! vertex_counts <- smap_int(large_struc, ~ igraph::vcount(.x)) vertex_counts[1:10] #>  [1] 5 2 3 5 2 5 2 3 5 2"},{"path":"https://glycoverse.github.io/glyrepr/articles/smap.html","id":"the-complete-smap-toolkit","dir":"Articles","previous_headings":"","what":"The Complete smap Toolkit 🛠️","title":"Power User Guide: Efficient Glycan Manipulation","text":"smap family provides glycan-aware equivalents virtually purrr functions: Simple rule: Replace map smap, pmap spmap, imap simap. Everything else works exactly like purrr!","code":""},{"path":"https://glycoverse.github.io/glyrepr/articles/smap.html","id":"lets-put-them-to-work","dir":"Articles","previous_headings":"The Complete smap Toolkit 🛠️","what":"Let’s Put Them to Work!","title":"Power User Guide: Efficient Glycan Manipulation","text":"Count vertices structure: Find structures 4 vertices: Get degree sequence structure: Check structure isolated vertices: Verify structures connected:","code":"vertex_counts <- smap_int(large_struc, igraph::vcount) summary(vertex_counts) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>     2.0     2.0     3.0     3.4     5.0     5.0 has_many_vertices <- smap_lgl(large_struc, ~ igraph::vcount(.x) > 4) sum(has_many_vertices) #> [1] 2000 degree_sequences <- smap(large_struc, ~ igraph::degree(.x)) degree_sequences[1:3]  # Show first 3 #> [[1]] #> 1 2 3 4 5  #> 1 1 3 2 1  #>  #> [[2]] #> 1 2  #> 1 1  #>  #> [[3]] #> 1 2 3  #> 1 1 2 ssome(large_struc, ~ any(igraph::degree(.x) == 0)) #> [1] FALSE severy(large_struc, ~ igraph::is_connected(.x)) #> [1] TRUE"},{"path":"https://glycoverse.github.io/glyrepr/articles/smap.html","id":"beyond-basic-smap","dir":"Articles","previous_headings":"The Complete smap Toolkit 🛠️","what":"Beyond Basic smap()","title":"Power User Guide: Efficient Glycan Manipulation","text":"Quick examples extended family: ⚠️ Performance Warning: simap functions don’t benefit unique structure optimization! Since element different index, combination (structure, index) always unique, breaking deduplication makes smap functions fast. Use simap truly need position information.","code":"# smap2: Apply function with additional parameters thresholds <- c(3, 4, 5) large_enough <- smap2_lgl(struc[1:3], thresholds, function(g, threshold) {   igraph::vcount(g) >= threshold }) large_enough #> [1]  TRUE FALSE FALSE # simap: Include position information indexed_report <- simap_chr(large_struc[1:3], function(g, i) {   paste0(\"#\", i, \": \", igraph::vcount(g), \" vertices\") }) indexed_report #> [1] \"#1: 5 vertices\" \"#2: 2 vertices\" \"#3: 3 vertices\""},{"path":"https://glycoverse.github.io/glyrepr/articles/smap.html","id":"performance-the-magic-of-deduplication","dir":"Articles","previous_headings":"","what":"Performance: The Magic of Deduplication ⚡","title":"Power User Guide: Efficient Glycan Manipulation","text":"beauty smap functions lies automatic deduplication: higher redundancy, bigger performance gain! real glycoproteomics datasets repeated structures, optimization can provide 10x speedups.","code":"# Create a large dataset with high redundancy huge_struc <- rep(struc, 5000)  # 25,000 structures, only 5 unique  cat(\"Dataset size:\", length(huge_struc), \"structures\\n\") #> Dataset size: 25000 structures cat(\"Unique structures:\", length(attr(huge_struc, \"structures\")), \"\\n\") #> Unique structures: 5 cat(\"Redundancy factor:\", length(huge_struc) / length(attr(huge_struc, \"structures\")), \"x\\n\") #> Redundancy factor: 5000 x  library(tictoc)  # Optimized approach: smap only processes 5 unique structures tic(\"smap_int (optimized)\") vertex_counts_optimized <- smap_int(huge_struc, igraph::vcount) toc() #> smap_int (optimized): 0.002 sec elapsed  # Naive approach: extract all graphs and process each one tic(\"Naive approach (all graphs)\") all_graphs <- get_structure_graphs(huge_struc)  # Extracts all 25,000 graphs vertex_counts_naive <- purrr::map_int(all_graphs, igraph::vcount) toc() #> Naive approach (all graphs): 0.239 sec elapsed  # Verify results are equivalent (though data types may differ) all.equal(vertex_counts_optimized, vertex_counts_naive) #> [1] TRUE"},{"path":[]},{"path":"https://glycoverse.github.io/glyrepr/articles/smap.html","id":"working-with-complex-functions","dir":"Articles","previous_headings":"Advanced Patterns and Tips 💡","what":"Working with Complex Functions","title":"Power User Guide: Efficient Glycan Manipulation","text":"function pass smap must accept igraph object first argument. can use purrr-style lambda notation:","code":"# Calculate clustering coefficient for each structure clustering_coeffs <- smap_dbl(large_struc, ~ igraph::transitivity(.x, type = \"global\")) summary(clustering_coeffs) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's  #>       0       0       0       0       0       0    2000"},{"path":"https://glycoverse.github.io/glyrepr/articles/smap.html","id":"combining-multiple-metrics","dir":"Articles","previous_headings":"Advanced Patterns and Tips 💡","what":"Combining Multiple Metrics","title":"Power User Guide: Efficient Glycan Manipulation","text":"","code":"# Create a comprehensive analysis structure_analysis <- smap(large_struc, function(g) {   list(     vertices = igraph::vcount(g),     edges = igraph::ecount(g),     diameter = ifelse(igraph::is_connected(g), igraph::diameter(g), NA),     clustering = igraph::transitivity(g, type = \"global\")   ) })  # Convert to a more usable format analysis_df <- do.call(rbind, lapply(structure_analysis, data.frame)) head(analysis_df) #>   vertices edges diameter clustering #> 1        5     4        3          0 #> 2        2     1        1        NaN #> 3        3     2        1          0 #> 4        5     4        2          0 #> 5        2     1        1        NaN #> 6        5     4        3          0"},{"path":"https://glycoverse.github.io/glyrepr/articles/smap.html","id":"memory-efficient-filtering","dir":"Articles","previous_headings":"Advanced Patterns and Tips 💡","what":"Memory-Efficient Filtering","title":"Power User Guide: Efficient Glycan Manipulation","text":"","code":"# Find only structures with exactly 5 vertices has_five_vertices <- smap_lgl(large_struc, ~ igraph::vcount(.x) == 5) five_vertex_structures <- large_struc[has_five_vertices]  cat(\"Found\", sum(has_five_vertices), \"structures with exactly 5 vertices\\n\") #> Found 2000 structures with exactly 5 vertices"},{"path":"https://glycoverse.github.io/glyrepr/articles/smap.html","id":"when-to-use-smap-functions","dir":"Articles","previous_headings":"","what":"When to Use smap Functions","title":"Power User Guide: Efficient Glycan Manipulation","text":"Use smap functions : ✅ need apply igraph-based functions glycan structures ✅ want maximum performance datasets containing repeated structures ✅ ’re building custom glycan analysis pipelines Stick regular R functions : ❌ Working compositions ❌ Operating string representations ⚠️ Special note simap: simap functions convenient position-aware operations, don’t provide performance benefits regular imap functions. inclusion index information breaks unique structure optimization, making (structure, index) pair unique even structures identical.","code":""},{"path":"https://glycoverse.github.io/glyrepr/articles/smap.html","id":"real-world-example-custom-motif-detection","dir":"Articles","previous_headings":"","what":"Real-World Example: Custom Motif Detection","title":"Power User Guide: Efficient Glycan Manipulation","text":"’s might build custom glycan analysis pipeline using smap functions:","code":"# Custom motif detector detect_branching <- function(g) {   degrees <- igraph::degree(g)   any(degrees >= 3) }  # Apply to large dataset - blazingly fast due to unique structure optimization has_branching <- smap_lgl(large_struc, detect_branching) cat(\"Structures with branching:\", sum(has_branching), \"out of\", length(large_struc), \"\\n\") #> Structures with branching: 2000 out of 5000  # Use smap2 to check structures against complexity thresholds complexity_thresholds <- rep(c(3, 4, 5, 2, 4), 1000)  # Thresholds for each structure meets_threshold <- smap2_lgl(large_struc, complexity_thresholds, function(g, threshold) {   igraph::vcount(g) >= threshold }) cat(\"Structures meeting complexity threshold:\", sum(meets_threshold), \"out of\", length(large_struc), \"\\n\") #> Structures meeting complexity threshold: 2000 out of 5000"},{"path":"https://glycoverse.github.io/glyrepr/articles/smap.html","id":"final-thoughts-youre-now-a-power-user","dir":"Articles","previous_headings":"","what":"Final Thoughts: You’re Now a Power User! 🎉","title":"Power User Guide: Efficient Glycan Manipulation","text":"Congratulations! now understand core optimization makes glyrepr blazingly fast leverage smap family functions. Key takeaways: - 🧠 Unique structure optimization secret sauce behind glyrepr’s performance - 🚀 smap functions drop-replacements purrr understand glycan structures - ⚡ Performance gains dramatic large datasets containing repeated structures - 🛠️ Use smap structures, regular R functions everything else ’re now equipped build next generation glycomics analysis tools. Go forth analyze! 🌟","code":""},{"path":"https://glycoverse.github.io/glyrepr/articles/smap.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session Information","title":"Power User Guide: Efficient Glycan Manipulation","text":"","code":"sessionInfo() #> R version 4.5.1 (2025-06-13) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 24.04.3 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.26.so;  LAPACK version 3.12.0 #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] tictoc_1.2.1       lobstr_1.1.2       glyrepr_0.7.4.9000 #>  #> loaded via a namespace (and not attached): #>  [1] jsonlite_2.0.0    dplyr_1.1.4       compiler_4.5.1    tidyselect_1.2.1  #>  [5] stringr_1.5.2     jquerylib_0.1.4   systemfonts_1.2.3 textshaping_1.0.3 #>  [9] yaml_2.3.10       fastmap_1.2.0     R6_2.6.1          generics_0.1.4    #> [13] igraph_2.1.4      knitr_1.50        backports_1.5.0   checkmate_2.3.3   #> [17] tibble_3.3.0      rstackdeque_1.1.1 desc_1.4.3        bslib_0.9.0       #> [21] pillar_1.11.1     rlang_1.1.6       cachem_1.1.0      stringi_1.8.7     #> [25] xfun_0.53         fs_1.6.6          sass_0.4.10       cli_3.6.5         #> [29] pkgdown_2.1.3     magrittr_2.0.4    digest_0.6.37     lifecycle_1.0.4   #> [33] prettyunits_1.2.0 vctrs_0.6.5       evaluate_1.0.5    glue_1.8.0        #> [37] ragg_1.5.0        rmarkdown_2.29    purrr_1.1.0       tools_4.5.1       #> [41] pkgconfig_2.0.3   htmltools_0.5.8.1"},{"path":"https://glycoverse.github.io/glyrepr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Bin Fu. Author, maintainer, copyright holder.","code":""},{"path":"https://glycoverse.github.io/glyrepr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Fu B (2025). glyrepr: Representation Glycan Compositions Structures. R package version 0.7.4.9000, https://glycoverse.github.io/glyrepr/.","code":"@Manual{,   title = {glyrepr: Representation for Glycan Compositions and Structures},   author = {Bin Fu},   year = {2025},   note = {R package version 0.7.4.9000},   url = {https://glycoverse.github.io/glyrepr/}, }"},{"path":"https://glycoverse.github.io/glyrepr/index.html","id":"glyrepr-","dir":"","previous_headings":"","what":"Representation for Glycan Compositions and Structures","title":"Representation for Glycan Compositions and Structures","text":"glyrepr provides two important representations glycans: glycan compositions glycan structures. package core glycoverse ecosystem, provides basic data structures functions representing manipulating glycans. fact, functions packages heavily used glycoverse packages glyparse glymotif, probably already using use.","code":""},{"path":"https://glycoverse.github.io/glyrepr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Representation for Glycan Compositions and Structures","text":"can install latest release glyrepr CRAN : install development version GitHub:","code":"install.packages(\"glyrepr\") remotes::install_github(\"glycoverse/glyrepr\")"},{"path":"https://glycoverse.github.io/glyrepr/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Representation for Glycan Compositions and Structures","text":"🚀 Get started: 🔍 Underlying graph representation: 🔧 Faster structure operations: ✏️ IUPAC-condensed glycan text representation: 📚 Reference: ","code":""},{"path":"https://glycoverse.github.io/glyrepr/index.html","id":"role-in-glycoverse","dir":"","previous_headings":"","what":"Role in glycoverse","title":"Representation for Glycan Compositions and Structures","text":"cornerstone glycoverse ecosystem, package provides two fundamental data structures representing glycans: glycan_composition() glycan_structure(). specialized data types distinguish glycoverse omics analysis frameworks, serving foundation higher-level packages like glymotif, build upon perform advanced glycan analysis.","code":""},{"path":"https://glycoverse.github.io/glyrepr/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Representation for Glycan Compositions and Structures","text":"","code":"library(glyrepr)  # Create glycan compositions glycan_composition(   c(Man = 5, GlcNAc = 2),   c(Man = 3, Gal = 2, GlcNAc = 4, Fuc = 1, Neu5Ac = 2) ) #> <glycan_composition[2]> #> [1] Man(5)GlcNAc(2) #> [2] Man(3)Gal(2)GlcNAc(4)Fuc(1)Neu5Ac(2)  # Parse IUPAC-condensed glycan text representation # `glyrepr` supports IUPAC-condensed glycan text representation natively. # For other formats like WURCS or glycoCT, use the `glyparse` package. # For example, the following two glycan structures are equivalent: structures <- as_glycan_structure(c(\"GlcNAc(b1-4)GlcNAc(?1-\", \"Man(a1-2)GlcNAc(?1-\"))  # Get the composition of a glycan structure as_glycan_composition(structures) #> <glycan_composition[2]> #> [1] GlcNAc(2) #> [2] Man(1)GlcNAc(1)  # Count the number of given residues count_mono(structures, \"Hex\") #> [1] 0 1 count_mono(glycan_composition(c(Man = 3, GlcNAc = 2, Gal = 2)), \"Hex\") #> [1] 5"},{"path":"https://glycoverse.github.io/glyrepr/reference/add_colors.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Colors to Monosaccharides — add_colors","title":"Add Colors to Monosaccharides — add_colors","text":"Add Colors Monosaccharides","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/add_colors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Colors to Monosaccharides — add_colors","text":"","code":"add_colors(monos, colored = TRUE)"},{"path":"https://glycoverse.github.io/glyrepr/reference/add_colors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Colors to Monosaccharides — add_colors","text":"monos character vector monosaccharide names colored logical value indicating whether add colors","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/add_colors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Colors to Monosaccharides — add_colors","text":"character vector ANSI color codes","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/add_gray_linkages.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Gray Color to Linkages in IUPAC String — add_gray_linkages","title":"Add Gray Color to Linkages in IUPAC String — add_gray_linkages","text":"Add Gray Color Linkages IUPAC String","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/add_gray_linkages.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Gray Color to Linkages in IUPAC String — add_gray_linkages","text":"","code":"add_gray_linkages(iupac_text)"},{"path":"https://glycoverse.github.io/glyrepr/reference/add_gray_linkages.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Gray Color to Linkages in IUPAC String — add_gray_linkages","text":"iupac_text Character string IUPAC notation","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/add_gray_linkages.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Gray Color to Linkages in IUPAC String — add_gray_linkages","text":"Character string linkages colored gray","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/as_glycan_composition.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert to Glycan Composition — as_glycan_composition","title":"Convert to Glycan Composition — as_glycan_composition","text":"Convert object glycan composition. resulting composition can contain monosaccharides substituents.","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/as_glycan_composition.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert to Glycan Composition — as_glycan_composition","text":"","code":"as_glycan_composition(x)  # S3 method for class 'glyrepr_composition' as_glycan_composition(x)  # S3 method for class 'glyrepr_structure' as_glycan_composition(x)  # S3 method for class 'character' as_glycan_composition(x)  # Default S3 method as_glycan_composition(x)"},{"path":"https://glycoverse.github.io/glyrepr/reference/as_glycan_composition.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert to Glycan Composition — as_glycan_composition","text":"x object convert glycan composition. Can named integer vector, list named integer vectors, glycan structure vector, existing glyrepr_composition object.","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/as_glycan_composition.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert to Glycan Composition — as_glycan_composition","text":"glyrepr_composition object.","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/as_glycan_composition.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert to Glycan Composition — as_glycan_composition","text":"converting glycan structures, monosaccharides substituents counted. Substituents extracted sub attribute vertex structure. example, vertex sub = \"3Me\" contributes one \"\" substituent composition.","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/as_glycan_composition.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert to Glycan Composition — as_glycan_composition","text":"","code":"# Convert a named vector as_glycan_composition(c(Hex = 5, HexNAc = 2)) #> <glycan_composition[1]> #> [1] Hex(5)HexNAc(2)  # Convert a named vector with substituents as_glycan_composition(c(Glc = 2, Gal = 1, Me = 1, S = 1)) #> <glycan_composition[1]> #> [1] Glc(2)Gal(1)Me(1)S(1)  # Convert a list of named vectors as_glycan_composition(list(c(Hex = 5, HexNAc = 2), c(Hex = 3, HexNAc = 1))) #> <glycan_composition[2]> #> [1] Hex(5)HexNAc(2) #> [2] Hex(3)HexNAc(1)  # Convert an existing composition (returns as-is) comp <- glycan_composition(c(Hex = 5, HexNAc = 2)) as_glycan_composition(comp) #> <glycan_composition[1]> #> [1] Hex(5)HexNAc(2)  # Convert a glycan structure vector strucs <- c(n_glycan_core(), o_glycan_core_1()) as_glycan_composition(strucs) #> <glycan_composition[2]> #> [1] Man(3)GlcNAc(2) #> [2] Gal(1)GalNAc(1)  # Convert structures with substituents # (This will count both monosaccharides and any substituents present)"},{"path":"https://glycoverse.github.io/glyrepr/reference/as_glycan_structure.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert to Glycan Structure Vector — as_glycan_structure","title":"Convert to Glycan Structure Vector — as_glycan_structure","text":"Convert object glycan structure vector.","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/as_glycan_structure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert to Glycan Structure Vector — as_glycan_structure","text":"","code":"as_glycan_structure(x)"},{"path":"https://glycoverse.github.io/glyrepr/reference/as_glycan_structure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert to Glycan Structure Vector — as_glycan_structure","text":"x object convert glycan structure vector. Can igraph object, list igraph objects, character vector IUPAC-condensed strings, existing glyrepr_structure object.","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/as_glycan_structure.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert to Glycan Structure Vector — as_glycan_structure","text":"glyrepr_structure object.","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/as_glycan_structure.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert to Glycan Structure Vector — as_glycan_structure","text":"","code":"library(igraph) #>  #> Attaching package: ‘igraph’ #> The following objects are masked from ‘package:stats’: #>  #>     decompose, spectrum #> The following object is masked from ‘package:base’: #>  #>     union  # Convert a single igraph graph <- make_graph(~ 1-+2) V(graph)$mono <- c(\"GlcNAc\", \"GlcNAc\") V(graph)$sub <- \"\" E(graph)$linkage <- \"b1-4\" graph$anomer <- \"a1\" as_glycan_structure(graph) #> <glycan_structure[1]> #> [1] GlcNAc(b1-4)GlcNAc(a1- #> # Unique structures: 1  # Convert a list of igraphs o_glycan_vec <- o_glycan_core_1() o_glycan_graph <- get_structure_graphs(o_glycan_vec) as_glycan_structure(list(graph, o_glycan_graph)) #> <glycan_structure[2]> #> [1] GlcNAc(b1-4)GlcNAc(a1- #> [2] Gal(b1-3)GalNAc(a1- #> # Unique structures: 2  # Convert a character vector of IUPAC-condensed strings as_glycan_structure(c(\"GlcNAc(b1-4)GlcNAc(b1-\", \"Man(a1-2)GlcNAc(b1-\")) #> <glycan_structure[2]> #> [1] GlcNAc(b1-4)GlcNAc(b1- #> [2] Man(a1-2)GlcNAc(b1- #> # Unique structures: 2"},{"path":"https://glycoverse.github.io/glyrepr/reference/available_monosaccharides.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Available Monosaacharides — available_monosaccharides","title":"Get Available Monosaacharides — available_monosaccharides","text":"function returns character vector monosaccharide names given type. See get_mono_type() monosaacharide types.","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/available_monosaccharides.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Available Monosaacharides — available_monosaccharides","text":"","code":"available_monosaccharides(mono_type = \"all\")"},{"path":"https://glycoverse.github.io/glyrepr/reference/available_monosaccharides.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Available Monosaacharides — available_monosaccharides","text":"mono_type character string specifying type monosaccharides. Can \"\", \"generic\", \"concrete\". Default \"\".","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/available_monosaccharides.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Available Monosaacharides — available_monosaccharides","text":"character vector monosaccharide names.","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/available_monosaccharides.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Available Monosaacharides — available_monosaccharides","text":"","code":"available_monosaccharides() #>  [1] \"Hex\"      \"HexNAc\"   \"HexN\"     \"HexA\"     \"dHex\"     \"dHexNAc\"  #>  [7] \"ddHex\"    \"Pent\"     \"NeuAc\"    \"NeuGc\"    \"Glc\"      \"Man\"      #> [13] \"Gal\"      \"Gul\"      \"Alt\"      \"All\"      \"Tal\"      \"Ido\"      #> [19] \"GlcNAc\"   \"GalNAc\"   \"ManNAc\"   \"GulNAc\"   \"AltNAc\"   \"AllNAc\"   #> [25] \"TalNAc\"   \"IdoNAc\"   \"GlcN\"     \"ManN\"     \"GalN\"     \"GulN\"     #> [31] \"AltN\"     \"AllN\"     \"TalN\"     \"IdoN\"     \"GlcA\"     \"ManA\"     #> [37] \"GalA\"     \"GulA\"     \"AltA\"     \"AllA\"     \"TalA\"     \"IdoA\"     #> [43] \"Fuc\"      \"Qui\"      \"Rha\"      \"6dGul\"    \"6dAlt\"    \"6dTal\"    #> [49] \"QuiNAc\"   \"RhaNAc\"   \"6dAltNAc\" \"6dTalNAc\" \"FucNAc\"   \"Oli\"      #> [55] \"Tyv\"      \"Abe\"      \"Par\"      \"Dig\"      \"Col\"      \"Ara\"      #> [61] \"Lyx\"      \"Xyl\"      \"Rib\"      \"Neu5Ac\"   \"Neu5Gc\"   \"Sia\"      #> [67] \"Neu\"      \"Kdn\"      \"Pse\"      \"Leg\"      \"Aci\"      \"4eLeg\"    #> [73] \"Bac\"      \"LDmanHep\" \"Kdo\"      \"Dha\"      \"DDmanHep\" \"MurNAc\"   #> [79] \"MurNGc\"   \"Mur\"      \"Api\"      \"Fru\"      \"Tag\"      \"Sor\"      #> [85] \"Psi\""},{"path":"https://glycoverse.github.io/glyrepr/reference/available_substituents.html","id":null,"dir":"Reference","previous_headings":"","what":"Available Substituents — available_substituents","title":"Available Substituents — available_substituents","text":"Get available substituents monosaccharides.","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/available_substituents.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Available Substituents — available_substituents","text":"","code":"available_substituents()"},{"path":"https://glycoverse.github.io/glyrepr/reference/available_substituents.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Available Substituents — available_substituents","text":"character vector.","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/available_substituents.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Available Substituents — available_substituents","text":"","code":"available_substituents() #>  [1] \"Me\"    \"Ac\"    \"NAc\"   \"P\"     \"S\"     \"Pyr\"   \"PC\"    \"PPEtn\" \"PEtn\"  #> [10] \"N\""},{"path":"https://glycoverse.github.io/glyrepr/reference/colorize_iupac_string.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply Colors to IUPAC String (Monosaccharides + Gray Linkages) — colorize_iupac_string","title":"Apply Colors to IUPAC String (Monosaccharides + Gray Linkages) — colorize_iupac_string","text":"Apply Colors IUPAC String (Monosaccharides + Gray Linkages)","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/colorize_iupac_string.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply Colors to IUPAC String (Monosaccharides + Gray Linkages) — colorize_iupac_string","text":"","code":"colorize_iupac_string(iupac_text, mono_names)"},{"path":"https://glycoverse.github.io/glyrepr/reference/colorize_iupac_string.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply Colors to IUPAC String (Monosaccharides + Gray Linkages) — colorize_iupac_string","text":"iupac_text Character string IUPAC notation mono_names Character vector monosaccharide names color","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/colorize_iupac_string.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply Colors to IUPAC String (Monosaccharides + Gray Linkages) — colorize_iupac_string","text":"Character string colored monosaccharides gray linkages","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/convert_to_generic.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Monosaccharides to Generic Type — convert_to_generic","title":"Convert Monosaccharides to Generic Type — convert_to_generic","text":"function converts monosaccharide types monosaccharide characters, glycan compositions, glycan structures concrete generic type. simplified version supports conversion \"concrete\" \"generic\" monosaccharides.","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/convert_to_generic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Monosaccharides to Generic Type — convert_to_generic","text":"","code":"convert_to_generic(x)  # S3 method for class 'character' convert_to_generic(x)  # S3 method for class 'glyrepr_structure' convert_to_generic(x)  # S3 method for class 'glyrepr_composition' convert_to_generic(x)"},{"path":"https://glycoverse.github.io/glyrepr/reference/convert_to_generic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Monosaccharides to Generic Type — convert_to_generic","text":"x Either objects: character monosaccharide; glycan composition vector (\"glyrepr_composition\" object); glycan structure vector (\"glyrepr_structure\" object).","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/convert_to_generic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Monosaccharides to Generic Type — convert_to_generic","text":"new object class x monosaccharides converted generic type.","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/convert_to_generic.html","id":"two-types-of-monosaccharides","dir":"Reference","previous_headings":"","what":"Two types of monosaccharides","title":"Convert Monosaccharides to Generic Type — convert_to_generic","text":"two types monosaccharides: concrete: e.g. \"Gal\", \"GlcNAc\", \"Glc\", \"Fuc\", etc. generic: e.g. \"Hex\", \"HexNAc\", \"HexA\", \"HexN\", etc. full list monosaccharides, use available_monosaccharides().","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/convert_to_generic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Monosaccharides to Generic Type — convert_to_generic","text":"","code":"# Convert character vectors convert_to_generic(c(\"Gal\", \"GlcNAc\")) #> [1] \"Hex\"    \"HexNAc\"  # Convert glycan compositions comps <- glycan_composition(   c(Gal = 5, GlcNAc = 2),   c(Glc = 5, GalNAc = 4, Fuc = 1) ) convert_to_generic(comps) #> <glycan_composition[2]> #> [1] Hex(5)HexNAc(2) #> [2] Hex(5)HexNAc(4)dHex(1)  # Convert glycan structures strucs <- glycan_structure(   n_glycan_core(),   o_glycan_core_1() ) convert_to_generic(strucs) #> <glycan_structure[2]> #> [1] Hex(a1-3)[Hex(a1-6)]Hex(b1-4)HexNAc(b1-4)HexNAc(b1- #> [2] Hex(b1-3)HexNAc(a1- #> # Unique structures: 2"},{"path":"https://glycoverse.github.io/glyrepr/reference/count_mono.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the Number of Monosaccharides — count_mono","title":"Get the Number of Monosaccharides — count_mono","text":"Get number monosaccharides glycan composition glycan structure. mono \"generic\" (e.g. \"Hex\", \"HexNAc\"), counts \"concrete\" monosaccharides match. example, \"Hex\" count Glc, Man, Gal, etc. mono \"concrete\" (e.g. \"Gal\", \"GalNAc\"), NA returned composition \"generic\".","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/count_mono.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the Number of Monosaccharides — count_mono","text":"","code":"count_mono(x, mono)  # S3 method for class 'glyrepr_composition' count_mono(x, mono)  # S3 method for class 'glyrepr_structure' count_mono(x, mono)"},{"path":"https://glycoverse.github.io/glyrepr/reference/count_mono.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the Number of Monosaccharides — count_mono","text":"x glycan composition (glyrepr_composition) glycan structure (glyrepr_structure) vector mono monosaccharide count. character scalar.","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/count_mono.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the Number of Monosaccharides — count_mono","text":"numeric vector length x.","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/count_mono.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the Number of Monosaccharides — count_mono","text":"","code":"comp <- glycan_composition(c(Hex = 5, HexNAc = 2), c(Gal = 1, Man = 1,GalNAc = 1)) count_mono(comp, \"Hex\") #> [1] 5 2 count_mono(comp, \"Gal\") #> [1] NA  1  struct <- as_glycan_structure(\"Gal(b1-3)GlcNAc(b1-4)Glc(a1-\") count_mono(struct, \"Gal\") #> [1] 1"},{"path":"https://glycoverse.github.io/glyrepr/reference/dot-extract_base_mono.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Base Monosaccharide Name (Without Substituents) — .extract_base_mono","title":"Extract Base Monosaccharide Name (Without Substituents) — .extract_base_mono","text":"Extract Base Monosaccharide Name (Without Substituents)","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/dot-extract_base_mono.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Base Monosaccharide Name (Without Substituents) — .extract_base_mono","text":"","code":".extract_base_mono(mono)"},{"path":"https://glycoverse.github.io/glyrepr/reference/dot-extract_base_mono.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Base Monosaccharide Name (Without Substituents) — .extract_base_mono","text":"mono monosaccharide name (character), potentially substituents","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/dot-extract_base_mono.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Base Monosaccharide Name (Without Substituents) — .extract_base_mono","text":"base monosaccharide name without substituents","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/dot-parse_iupac_condensed_single.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse IUPAC-condensed string to glycan structure — .parse_iupac_condensed_single","title":"Parse IUPAC-condensed string to glycan structure — .parse_iupac_condensed_single","text":"Internal functions parsing IUPAC-condensed strings igraph objects. supports as_glycan_structure.character method.","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/dot-parse_iupac_condensed_single.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse IUPAC-condensed string to glycan structure — .parse_iupac_condensed_single","text":"","code":".parse_iupac_condensed_single(x)"},{"path":"https://glycoverse.github.io/glyrepr/reference/dot-parse_iupac_condensed_single.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse IUPAC-condensed string to glycan structure — .parse_iupac_condensed_single","text":"x single IUPAC-condensed string","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/dot-parse_iupac_condensed_single.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse IUPAC-condensed string to glycan structure — .parse_iupac_condensed_single","text":"igraph object representing glycan structure","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/format_glycan_structure_subset.html","id":null,"dir":"Reference","previous_headings":"","what":"Format a Subset of Glycan Structures with Optional Colors — format_glycan_structure_subset","title":"Format a Subset of Glycan Structures with Optional Colors — format_glycan_structure_subset","text":"Format Subset Glycan Structures Optional Colors","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/format_glycan_structure_subset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format a Subset of Glycan Structures with Optional Colors — format_glycan_structure_subset","text":"","code":"format_glycan_structure_subset(x, indices, colored = TRUE)"},{"path":"https://glycoverse.github.io/glyrepr/reference/format_glycan_structure_subset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format a Subset of Glycan Structures with Optional Colors — format_glycan_structure_subset","text":"x glyrepr_structure object indices Indices structures format colored logical value indicating whether add colors","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/format_glycan_structure_subset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format a Subset of Glycan Structures with Optional Colors — format_glycan_structure_subset","text":"character vector formatted structures specified indices","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/get_anomer.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the Anomeric information — get_anomer","title":"Get the Anomeric information — get_anomer","text":"Get Anomeric information","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/get_anomer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the Anomeric information — get_anomer","text":"","code":"get_anomer(x)"},{"path":"https://glycoverse.github.io/glyrepr/reference/get_anomer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the Anomeric information — get_anomer","text":"x glycan structure vector (glyrepr_structure).","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/get_anomer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the Anomeric information — get_anomer","text":"character vector anomeric information.","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/get_anomer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the Anomeric information — get_anomer","text":"","code":"x <- n_glycan_core() get_anomer(x) #> [1] \"b1\""},{"path":"https://glycoverse.github.io/glyrepr/reference/get_mono_color.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Color for Concrete Monosaccharides — get_mono_color","title":"Get Color for Concrete Monosaccharides — get_mono_color","text":"Get Color Concrete Monosaccharides","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/get_mono_color.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Color for Concrete Monosaccharides — get_mono_color","text":"","code":"get_mono_color(mono)"},{"path":"https://glycoverse.github.io/glyrepr/reference/get_mono_color.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Color for Concrete Monosaccharides — get_mono_color","text":"mono monosaccharide name (character), potentially substituents","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/get_mono_color.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Color for Concrete Monosaccharides — get_mono_color","text":"color code (character)","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/get_mono_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Monosaccharide Types — get_mono_type","title":"Get Monosaccharide Types — get_mono_type","text":"function determines type monosaccharides character vectors, glycan compositions, glycan structures. Supported types: \"concrete\" \"generic\" (see details ).","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/get_mono_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Monosaccharide Types — get_mono_type","text":"","code":"get_mono_type(x)  # S3 method for class 'character' get_mono_type(x)  # S3 method for class 'glyrepr_structure' get_mono_type(x)  # S3 method for class 'glyrepr_composition' get_mono_type(x)"},{"path":"https://glycoverse.github.io/glyrepr/reference/get_mono_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Monosaccharide Types — get_mono_type","text":"x Either objects: character vector monosaccharide names; glycan composition vector (\"glyrepr_composition\" object); glycan structure vector (\"glyrepr_structure\" object).","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/get_mono_type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Monosaccharide Types — get_mono_type","text":"character vector specifying monosaccharide type(s). structures compositions, returns type element.","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/get_mono_type.html","id":"two-types-of-monosaccharides","dir":"Reference","previous_headings":"","what":"Two types of monosaccharides","title":"Get Monosaccharide Types — get_mono_type","text":"two types monosaccharides: concrete: e.g. \"Gal\", \"GlcNAc\", \"Glc\", \"Fuc\", etc. generic: e.g. \"Hex\", \"HexNAc\", \"HexA\", \"HexN\", etc. full list monosaccharides, use available_monosaccharides().","code":""},{"path":[]},{"path":"https://glycoverse.github.io/glyrepr/reference/get_mono_type.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Monosaccharide Types — get_mono_type","text":"","code":"# Character vector get_mono_type(c(\"Gal\", \"Hex\")) #> [1] \"concrete\" \"generic\"   # Glycan structures get_mono_type(n_glycan_core(mono_type = \"concrete\")) #> [1] \"concrete\" get_mono_type(n_glycan_core(mono_type = \"generic\")) #> [1] \"generic\"  # Glycan compositions comp <- glycan_composition(c(Glc = 2, GalNAc = 1)) get_mono_type(comp) #> [1] \"concrete\""},{"path":"https://glycoverse.github.io/glyrepr/reference/get_structure_graphs.html","id":null,"dir":"Reference","previous_headings":"","what":"Access Individual Glycan Structures — get_structure_graphs","title":"Access Individual Glycan Structures — get_structure_graphs","text":"Extract individual glycan structure graphs glycan structure vector.","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/get_structure_graphs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Access Individual Glycan Structures — get_structure_graphs","text":"","code":"get_structure_graphs(x, return_list = NULL)"},{"path":"https://glycoverse.github.io/glyrepr/reference/get_structure_graphs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Access Individual Glycan Structures — get_structure_graphs","text":"x glycan structure vector. return_list TRUE, always returns list. FALSE x length 1, return igraph object directly. provided (default), FALSE x length 1 TRUE otherwise.","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/get_structure_graphs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Access Individual Glycan Structures — get_structure_graphs","text":"list igraph objects igraph object directly (see return_list parameter).","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/get_structure_graphs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Access Individual Glycan Structures — get_structure_graphs","text":"","code":"structures <- glycan_structure(o_glycan_core_1(), n_glycan_core()) get_structure_graphs(structures) #> [[1]] #> IGRAPH 1660932 DN-- 2 1 --  #> + attr: anomer (g/c), name (v/c), mono (v/c), sub (v/c), linkage (e/c) #> + edge from 1660932 (vertex names): #> [1] 2->1 #>  #> [[2]] #> IGRAPH 3521ea3 DN-- 5 4 --  #> + attr: anomer (g/c), name (v/c), mono (v/c), sub (v/c), linkage (e/c) #> + edges from 3521ea3 (vertex names): #> [1] 3->1 3->2 4->3 5->4 #>  get_structure_graphs(structures) #> [[1]] #> IGRAPH 1660932 DN-- 2 1 --  #> + attr: anomer (g/c), name (v/c), mono (v/c), sub (v/c), linkage (e/c) #> + edge from 1660932 (vertex names): #> [1] 2->1 #>  #> [[2]] #> IGRAPH 3521ea3 DN-- 5 4 --  #> + attr: anomer (g/c), name (v/c), mono (v/c), sub (v/c), linkage (e/c) #> + edges from 3521ea3 (vertex names): #> [1] 3->1 3->2 4->3 5->4 #>"},{"path":"https://glycoverse.github.io/glyrepr/reference/glycan_composition.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Glycan Composition — glycan_composition","title":"Create a Glycan Composition — glycan_composition","text":"Create glycan composition list named integer vectors. Compositions can contain monosaccharides substituents.","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/glycan_composition.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Glycan Composition — glycan_composition","text":"","code":"glycan_composition(...)  is_glycan_composition(x)"},{"path":"https://glycoverse.github.io/glyrepr/reference/glycan_composition.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Glycan Composition — glycan_composition","text":"... Named integer vectors. Names monosaccharides substituents, values numbers residues. Monosaccharides substituents can mixed composition. x list named integer vectors.","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/glycan_composition.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Glycan Composition — glycan_composition","text":"glyrepr_composition object.","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/glycan_composition.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a Glycan Composition — glycan_composition","text":"Compositions can contain: Monosaccharides: either generic (e.g., \"Hex\", \"HexNAc\") concrete (e.g., \"Glc\", \"Gal\"). monosaccharides composition must type. Substituents: e.g., \"\", \"Ac\", \"S\". can mixed either generic concrete monosaccharides. Components automatically sorted monosaccharides first (according order monosaccharides table), followed substituents (according order available_substituents()).","code":""},{"path":[]},{"path":"https://glycoverse.github.io/glyrepr/reference/glycan_composition.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Glycan Composition — glycan_composition","text":"","code":"# A vector with one composition (generic monosaccharides) glycan_composition(c(Hex = 5, HexNAc = 2)) #> <glycan_composition[1]> #> [1] Hex(5)HexNAc(2) # A vector with multiple compositions glycan_composition(c(Hex = 5, HexNAc = 2), c(Hex = 5, HexNAc = 4, dHex = 2)) #> <glycan_composition[2]> #> [1] Hex(5)HexNAc(2) #> [2] Hex(5)HexNAc(4)dHex(2) # Residues are reordered automatically glycan_composition(c(HexNAc = 1, Hex = 2)) #> <glycan_composition[1]> #> [1] Hex(2)HexNAc(1) # An example for generic monosaccharides glycan_composition(c(Hex = 2, HexNAc = 1)) #> <glycan_composition[1]> #> [1] Hex(2)HexNAc(1) # An example for concrete monosaccharides glycan_composition(c(Glc = 2, Gal = 1)) #> <glycan_composition[1]> #> [1] Glc(2)Gal(1) # Compositions with substituents glycan_composition(c(Glc = 1, S = 1)) #> <glycan_composition[1]> #> [1] Glc(1)S(1) glycan_composition(c(Hex = 3, HexNAc = 2, Me = 1, Ac = 1)) #> <glycan_composition[1]> #> [1] Hex(3)HexNAc(2)Me(1)Ac(1) # Substituents are sorted after monosaccharides glycan_composition(c(S = 1, Gal = 1, Ac = 1, Glc = 1)) #> <glycan_composition[1]> #> [1] Glc(1)Gal(1)Ac(1)S(1)"},{"path":"https://glycoverse.github.io/glyrepr/reference/glycan_structure.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Glycan Structure Vector — glycan_structure","title":"Create a Glycan Structure Vector — glycan_structure","text":"glycan_structure() creates efficient glycan structure vector storing processing glycan molecular structures. function employs hash-based deduplication mechanisms, making suitable glycoproteomics, glycomics analysis, glycan structure comparison studies.","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/glycan_structure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Glycan Structure Vector — glycan_structure","text":"","code":"glycan_structure(...)  is_glycan_structure(x)"},{"path":"https://glycoverse.github.io/glyrepr/reference/glycan_structure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Glycan Structure Vector — glycan_structure","text":"... igraph graph objects converted glycan structures, existing glycan structure vectors. Supports mixed input multiple objects. x object check convert.","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/glycan_structure.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Glycan Structure Vector — glycan_structure","text":"glyrepr_structure class glycan structure vector object.","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/glycan_structure.html","id":"core-features","dir":"Reference","previous_headings":"","what":"Core Features","title":"Create a Glycan Structure Vector — glycan_structure","text":"Efficient Storage: Uses hash values IUPAC codes deduplication, avoiding redundant storage identical glycan structures Graph Model Representation: glycan structure represented directed graph nodes monosaccharides edges glycosidic linkages Vectorized Operations: Supports R's vectorized operations batch processing glycan data Type Safety: Built vctrs package, providing type-safe operations","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/glycan_structure.html","id":"data-structure-overview","dir":"Reference","previous_headings":"","what":"Data Structure Overview","title":"Create a Glycan Structure Vector — glycan_structure","text":"glycan structure vector vctrs record additional S3 class glyrepr_structure. Therefore, sloop::s3_class() returns class hierarchy c(\"glyrepr_structure\", \"vctrs_rcrd\"). glycan structure must satisfy following constraints:","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/glycan_structure.html","id":"graph-structure-requirements","dir":"Reference","previous_headings":"","what":"Graph Structure Requirements","title":"Create a Glycan Structure Vector — glycan_structure","text":"Must directed graph outward tree structure (reducing end root) Must graph attribute anomer format \"a1\" \"b1\" Unknown parts can represented \"?\", e.g., \"?1\", \"?\", \"??\"","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/glycan_structure.html","id":"node-attributes","dir":"Reference","previous_headings":"","what":"Node Attributes","title":"Create a Glycan Structure Vector — glycan_structure","text":"mono: Monosaccharide names, must known monosaccharide types Generic names: Hex, HexNAc, dHex, NeuAc, etc. Concrete names: Glc, Gal, Man, GlcNAc, etc. mix generic concrete names NA values allowed sub: Substituent information Single substituent format: \"xY\" (x = position, Y = substituent name), e.g., \"2Ac\", \"3S\" Multiple substituents separated commas ordered position, e.g., \"3Me,4Ac\", \"2S,6P\" substituents represented empty string \"\"","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/glycan_structure.html","id":"edge-attributes","dir":"Reference","previous_headings":"","what":"Edge Attributes","title":"Create a Glycan Structure Vector — glycan_structure","text":"linkage: Glycosidic linkage information format \"/bX-Y\" Standard format: e.g., \"b1-4\", \"a2-3\" Unknown positions allowed: \"a1-?\", \"b?-3\", \"??-?\" Partially unknown positions: \"a1-3/6\", \"a1-3/6/9\" NA values allowed","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/glycan_structure.html","id":"node-and-edge-order","dir":"Reference","previous_headings":"","what":"Node and Edge Order","title":"Create a Glycan Structure Vector — glycan_structure","text":"indices vertices linkages glycan correspond directly order IUPAC-condensed string, printed print glycan_structure(). example, glycan Man(a1-3)[Man(a1-6)]Man(b1-4)GlcNAc(b1-4)GlcNAc(b1-, vertices \"Man\", \"Man\", \"Man\", \"GlcNAc\", \"GlcNAc\", linkages \"a1-3\", \"a1-6\", \"b1-4\", \"b1-4\".","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/glycan_structure.html","id":"use-cases","dir":"Reference","previous_headings":"","what":"Use Cases","title":"Create a Glycan Structure Vector — glycan_structure","text":"Glycoproteomics Analysis: Processing glycan structure information mass spectrometry data Glycomics Research: Comparing glycan expression profiles across different samples conditions Structure-Function Analysis: Studying relationships glycan structures biological functions Database Queries: Performing structure matching searches glycan databases","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/glycan_structure.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Glycan Structure Vector — glycan_structure","text":"","code":"library(igraph)  # Example 1: Create a simple glycan structure GlcNAc(b1-4)GlcNAc graph <- make_graph(~ 1-+2)  # Create graph with two monosaccharides V(graph)$mono <- c(\"GlcNAc\", \"GlcNAc\")  # Set monosaccharide types V(graph)$sub <- \"\"  # No substituents E(graph)$linkage <- \"b1-4\"  # b1-4 glycosidic linkage graph$anomer <- \"a1\"  # a anomeric carbon  # Create glycan structure vector simple_struct <- glycan_structure(graph) print(simple_struct) #> <glycan_structure[1]> #> [1] GlcNAc(b1-4)GlcNAc(a1- #> # Unique structures: 1  # Example 2: Use predefined glycan core structures n_core <- n_glycan_core()  # N-glycan core structure o_core1 <- o_glycan_core_1()  # O-glycan Core 1 structure  # Create vector with multiple structures multi_struct <- glycan_structure(n_core, o_core1) print(multi_struct) #> <glycan_structure[2]> #> [1] Man(a1-3)[Man(a1-6)]Man(b1-4)GlcNAc(b1-4)GlcNAc(b1- #> [2] Gal(b1-3)GalNAc(a1- #> # Unique structures: 2  # Example 3: Create complex structure with substituents complex_graph <- make_graph(~ 1-+2-+3) V(complex_graph)$mono <- c(\"GlcNAc\", \"Gal\", \"Neu5Ac\") V(complex_graph)$sub <- c(\"\", \"\", \"\")  # Add substituents as needed E(complex_graph)$linkage <- c(\"b1-4\", \"a2-3\") complex_graph$anomer <- \"b1\"  complex_struct <- glycan_structure(complex_graph) print(complex_struct) #> <glycan_structure[1]> #> [1] Neu5Ac(a2-3)Gal(b1-4)GlcNAc(b1- #> # Unique structures: 1  # Example 4: Check if object is a glycan structure is_glycan_structure(simple_struct)  # TRUE #> [1] TRUE is_glycan_structure(graph)          # FALSE #> [1] FALSE  # Example 5: Mix different input types mixed_struct <- glycan_structure(graph, o_glycan_core_2(), simple_struct) print(mixed_struct) #> <glycan_structure[3]> #> [1] GlcNAc(b1-4)GlcNAc(a1- #> [2] Gal(b1-3)[GlcNAc(b1-6)]GalNAc(a1- #> [3] GlcNAc(b1-4)GlcNAc(a1- #> # Unique structures: 2"},{"path":"https://glycoverse.github.io/glyrepr/reference/glyrepr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"glyrepr: Representation for Glycan Compositions and Structures — glyrepr-package","title":"glyrepr: Representation for Glycan Compositions and Structures — glyrepr-package","text":"Computational representations glycan compositions structures, including details linkages, anomers, substituents. Supports varying levels monosaccharide specificity (e.g., \"Hex\" \"Gal\") ambiguous linkages. Provides robust parsing generation IUPAC-condensed structure strings. Optimized vectorized operations glycan structures, efficient handling duplications. cornerstone glycoverse ecosystem, package delivers foundational data structures power glycomics glycoproteomics analysis workflows.","code":""},{"path":[]},{"path":"https://glycoverse.github.io/glyrepr/reference/glyrepr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"glyrepr: Representation for Glycan Compositions and Structures — glyrepr-package","text":"Maintainer: Bin Fu 23110220018@m.fudan.edu.cn (ORCID) [copyright holder]","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/glyrepr-vctrs.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal vctrs methods — glyrepr-vctrs","title":"Internal vctrs methods — glyrepr-vctrs","text":"Internal vctrs methods","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/has_linkages.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine if a Glycan Structure has Linkages — has_linkages","title":"Determine if a Glycan Structure has Linkages — has_linkages","text":"Unknown linkages glycan structure represented \"??-?\". function checks linkages glycan structure unknown. Note even one linkage partial known (e.g. \"?-?\"), function return TRUE.","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/has_linkages.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine if a Glycan Structure has Linkages — has_linkages","text":"","code":"has_linkages(glycan)"},{"path":"https://glycoverse.github.io/glyrepr/reference/has_linkages.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine if a Glycan Structure has Linkages — has_linkages","text":"glycan glyrepr_structure vector.","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/has_linkages.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine if a Glycan Structure has Linkages — has_linkages","text":"logical vector indicating glycan structure linkages.","code":""},{"path":[]},{"path":"https://glycoverse.github.io/glyrepr/reference/has_linkages.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determine if a Glycan Structure has Linkages — has_linkages","text":"","code":"glycan <- o_glycan_core_1(linkage = TRUE) has_linkages(glycan) #> [1] TRUE print(glycan) #> <glycan_structure[1]> #> [1] Gal(b1-3)GalNAc(a1- #> # Unique structures: 1  glycan <- remove_linkages(glycan) has_linkages(glycan) #> [1] FALSE print(glycan) #> <glycan_structure[1]> #> [1] Gal(??-?)GalNAc(??- #> # Unique structures: 1"},{"path":"https://glycoverse.github.io/glyrepr/reference/is_known_monosaccharide.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if a Monosaccharide is Known — is_known_monosaccharide","title":"Check if a Monosaccharide is Known — is_known_monosaccharide","text":"function checks vector monosaccharide names known.","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/is_known_monosaccharide.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if a Monosaccharide is Known — is_known_monosaccharide","text":"","code":"is_known_monosaccharide(mono)"},{"path":"https://glycoverse.github.io/glyrepr/reference/is_known_monosaccharide.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if a Monosaccharide is Known — is_known_monosaccharide","text":"mono character vector monosaccharide names.","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/is_known_monosaccharide.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if a Monosaccharide is Known — is_known_monosaccharide","text":"logical vector.","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/is_known_monosaccharide.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if a Monosaccharide is Known — is_known_monosaccharide","text":"","code":"is_known_monosaccharide(c(\"Gal\", \"Hex\")) #> [1] TRUE TRUE is_known_monosaccharide(c(\"X\", \"Hx\", \"Nac\")) #> [1] FALSE FALSE FALSE"},{"path":"https://glycoverse.github.io/glyrepr/reference/n_glycan_core.html","id":null,"dir":"Reference","previous_headings":"","what":"Example Glycan Structures — n_glycan_core","title":"Example Glycan Structures — n_glycan_core","text":"Create example glycan structures testing demonstration. Includes N-glycan core O-glycan core 1 core 2.","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/n_glycan_core.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example Glycan Structures — n_glycan_core","text":"","code":"n_glycan_core(linkage = TRUE, mono_type = \"concrete\")  o_glycan_core_1(linkage = TRUE, mono_type = \"concrete\")  o_glycan_core_2(linkage = TRUE, mono_type = \"concrete\")"},{"path":"https://glycoverse.github.io/glyrepr/reference/n_glycan_core.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Example Glycan Structures — n_glycan_core","text":"linkage logical indicating whether include linkages (e.g. \"b1-4\"). Default TRUE. mono_type character string specifying type monosaccharides. Can \"generic\" (Hex, HexNAc, dHex, NeuAc, etc.) \"concrete\" (Man, Gal, HexNAc, Fuc, etc.). Default \"concrete\".","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/n_glycan_core.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Example Glycan Structures — n_glycan_core","text":"glycan structure (igraph) object.","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/n_glycan_core.html","id":"n-glycan-core","dir":"Reference","previous_headings":"","what":"N-Glycan Core","title":"Example Glycan Structures — n_glycan_core","text":"N-Glycans branched oligosaccharides bound, commonly, via GlcNAc Asn residue protein backbone. common motif N-glycans chitobiose core, composed three mannose two GlcNAc moieties, commonly attached protein backbone via GlcNAc. mannose residue branched connected via a1,3- a1,6-glycosidic linkages two mannose building blocks.","code":"Man   a1-6 \\   b1-4      b1-4      b1-         Man -- GlcNAc -- GlcNAc -   a1-3 /     Man"},{"path":"https://glycoverse.github.io/glyrepr/reference/n_glycan_core.html","id":"o-glycan-core","dir":"Reference","previous_headings":"","what":"O-Glycan Core","title":"Example Glycan Structures — n_glycan_core","text":"O-Glycans highly abundant extracellular proteins. Generally, O-glycans extended following four major core structures: core 1, core 2, core 3, core 4. first two far common core structures O-glycosylation found throughout body. core 1:   core 2:","code":"a1-     GalNAc -    / b1-3 Gal GlcNAc       \\ b1-6 a1-        GalNAc -       / b1-3    Gal"},{"path":"https://glycoverse.github.io/glyrepr/reference/n_glycan_core.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example Glycan Structures — n_glycan_core","text":"","code":"print(n_glycan_core(), verbose = TRUE) #> <glycan_structure[1]> #> [1] Man(a1-3)[Man(a1-6)]Man(b1-4)GlcNAc(b1-4)GlcNAc(b1- #> # Unique structures: 1 print(o_glycan_core_1(), verbose = TRUE) #> <glycan_structure[1]> #> [1] Gal(b1-3)GalNAc(a1- #> # Unique structures: 1"},{"path":"https://glycoverse.github.io/glyrepr/reference/normalize_substituents.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalize Substituent String — normalize_substituents","title":"Normalize Substituent String — normalize_substituents","text":"Takes substituent string (potentially multiple substituents) returns normalized string substituents sorted position.","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/normalize_substituents.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalize Substituent String — normalize_substituents","text":"","code":"normalize_substituents(sub)"},{"path":"https://glycoverse.github.io/glyrepr/reference/normalize_substituents.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalize Substituent String — normalize_substituents","text":"sub character string representing substituents, e.g., \"4Ac,3Me\" \"6S\"","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/normalize_substituents.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Normalize Substituent String — normalize_substituents","text":"character string substituents sorted position, e.g., \"3Me,4Ac\"","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/normalize_substituents.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Normalize Substituent String — normalize_substituents","text":"","code":"normalize_substituents(\"4Ac,3Me\")  # Returns \"3Me,4Ac\" #> [1] \"3Me,4Ac\" normalize_substituents(\"6S\")       # Returns \"6S\" #> [1] \"6S\" normalize_substituents(\"\")         # Returns \"\" #> [1] \"\""},{"path":"https://glycoverse.github.io/glyrepr/reference/possible_linkages.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Possible Linkages — possible_linkages","title":"Generate Possible Linkages — possible_linkages","text":"Given obscure linkage format (\"?\", e.g. \"a2-?\"), function generates possible linkages based format. See valid_linkages() details. ranges possible anomers, first positions, second positions can specified using anomer_range, pos1_range, pos2_range.","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/possible_linkages.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Possible Linkages — possible_linkages","text":"","code":"possible_linkages(   linkage,   anomer_range = c(\"a\", \"b\"),   pos1_range = 1:2,   pos2_range = 1:9,   include_unknown = FALSE )"},{"path":"https://glycoverse.github.io/glyrepr/reference/possible_linkages.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Possible Linkages — possible_linkages","text":"linkage linkage string. anomer_range character vector possible anomers. Default c(\"\", \"b\"). pos1_range numeric vector possible first positions. Default 1:2. pos2_range numeric vector possible second positions. Default 1:9. include_unknown logical value. TRUE, \"?\" included. Default FALSE.","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/possible_linkages.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Possible Linkages — possible_linkages","text":"character vector possible linkages.","code":""},{"path":[]},{"path":"https://glycoverse.github.io/glyrepr/reference/possible_linkages.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Possible Linkages — possible_linkages","text":"","code":"possible_linkages(\"a2-?\") #> [1] \"a2-1\" \"a2-2\" \"a2-3\" \"a2-4\" \"a2-5\" \"a2-6\" \"a2-7\" \"a2-8\" \"a2-9\" possible_linkages(\"??-2\") #> [1] \"a1-2\" \"b1-2\" \"a2-2\" \"b2-2\" possible_linkages(\"a1-3\") #> [1] \"a1-3\" possible_linkages(\"a?-?\", pos1_range = 2, pos2_range = c(2, 3)) #> [1] \"a2-2\" \"a2-3\" possible_linkages(\"?1-6\", include_unknown = TRUE) #> [1] \"a1-6\" \"b1-6\" \"?1-6\""},{"path":"https://glycoverse.github.io/glyrepr/reference/remove_linkages.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove All Linkages from a Glycan — remove_linkages","title":"Remove All Linkages from a Glycan — remove_linkages","text":"function replaces linkages glycan structure \"??-?\", well reducing end anomer \"??-\".","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/remove_linkages.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove All Linkages from a Glycan — remove_linkages","text":"","code":"remove_linkages(glycan)"},{"path":"https://glycoverse.github.io/glyrepr/reference/remove_linkages.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove All Linkages from a Glycan — remove_linkages","text":"glycan glyrepr_structure vector.","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/remove_linkages.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove All Linkages from a Glycan — remove_linkages","text":"glyrepr_structure vector linkages removed.","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/remove_linkages.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove All Linkages from a Glycan — remove_linkages","text":"","code":"glycan <- o_glycan_core_1(linkage = TRUE) glycan #> <glycan_structure[1]> #> [1] Gal(b1-3)GalNAc(a1- #> # Unique structures: 1 remove_linkages(glycan) #> <glycan_structure[1]> #> [1] Gal(??-?)GalNAc(??- #> # Unique structures: 1"},{"path":"https://glycoverse.github.io/glyrepr/reference/remove_substituents.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove All Substituents from a Glycan — remove_substituents","title":"Remove All Substituents from a Glycan — remove_substituents","text":"function replaces substituents glycan structure empty strings.","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/remove_substituents.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove All Substituents from a Glycan — remove_substituents","text":"","code":"remove_substituents(glycan)"},{"path":"https://glycoverse.github.io/glyrepr/reference/remove_substituents.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove All Substituents from a Glycan — remove_substituents","text":"glycan glyrepr_structure vector.","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/remove_substituents.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove All Substituents from a Glycan — remove_substituents","text":"glyrepr_structure vector substituents removed.","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/remove_substituents.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove All Substituents from a Glycan — remove_substituents","text":"","code":"(glycan <- glycan_structure(o_glycan_core_1())) #> <glycan_structure[1]> #> [1] Gal(b1-3)GalNAc(a1- #> # Unique structures: 1 remove_substituents(glycan) #> <glycan_structure[1]> #> [1] Gal(b1-3)GalNAc(a1- #> # Unique structures: 1"},{"path":"https://glycoverse.github.io/glyrepr/reference/replace_monos_with_colored.html","id":null,"dir":"Reference","previous_headings":"","what":"Replace Monosaccharides in String with Colored Versions — replace_monos_with_colored","title":"Replace Monosaccharides in String with Colored Versions — replace_monos_with_colored","text":"Replace Monosaccharides String Colored Versions","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/replace_monos_with_colored.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replace Monosaccharides in String with Colored Versions — replace_monos_with_colored","text":"","code":"replace_monos_with_colored(text, mono_names)"},{"path":"https://glycoverse.github.io/glyrepr/reference/replace_monos_with_colored.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replace Monosaccharides in String with Colored Versions — replace_monos_with_colored","text":"text Character string containing monosaccharide names mono_names Character vector monosaccharide names replace","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/replace_monos_with_colored.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Replace Monosaccharides in String with Colored Versions — replace_monos_with_colored","text":"Character string monosaccharides replaced colored versions","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/simap.html","id":null,"dir":"Reference","previous_headings":"","what":"Map Functions Over Glycan Structure Vectors with Indices — simap","title":"Map Functions Over Glycan Structure Vectors with Indices — simap","text":"functions apply function unique structure glycan structure vector along corresponding indices, taking advantage hash-based deduplication avoid redundant computation. Similar purrr imap functions, optimized glycan structure vectors.","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/simap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map Functions Over Glycan Structure Vectors with Indices — simap","text":"","code":"simap(.x, .f, ...)  simap_vec(.x, .f, ..., .ptype = NULL)  simap_lgl(.x, .f, ...)  simap_int(.x, .f, ...)  simap_dbl(.x, .f, ...)  simap_chr(.x, .f, ...)  simap_structure(.x, .f, ...)"},{"path":"https://glycoverse.github.io/glyrepr/reference/simap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map Functions Over Glycan Structure Vectors with Indices — simap","text":".x glycan structure vector (glyrepr_structure). .f function takes igraph object (.x) index/name, returning result. Can function, purrr-style lambda (~ paste(.x, .y)), character string naming function. ... Additional arguments passed .f. .ptype prototype return type (simap_vec).","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/simap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Map Functions Over Glycan Structure Vectors with Indices — simap","text":"simap(): list simap_vec(): atomic vector type specified .ptype simap_lgl(): Returns logical vector simap_int(): Returns integer vector simap_dbl(): Returns double vector simap_chr(): Returns character vector simap_structure(): new glyrepr_structure object","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/simap.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Map Functions Over Glycan Structure Vectors with Indices — simap","text":"functions compute .f unique combination structure corresponding index/name, map results back original vector positions. much efficient applying .f element individually duplicate structures. IMPORTANT PERFORMANCE NOTE: Due inclusion position indices, simap functions O(total_structures) time complexity position creates unique combination, even identical structures. Alternative: Consider smap() functions position information required. index passed .f position original vector (1-based). vector names, names passed instead indices. Return Types: simap(): Returns list length .x simap_vec(): Returns atomic vector length .x simap_lgl(): Returns logical vector simap_int(): Returns integer vector simap_dbl(): Returns double vector simap_chr(): Returns character vector simap_structure(): Returns new glycan structure vector (.f must return igraph objects)","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/simap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Map Functions Over Glycan Structure Vectors with Indices — simap","text":"","code":"# Create structure vectors with duplicates core1 <- o_glycan_core_1() core2 <- n_glycan_core() structures <- glycan_structure(core1, core2, core1)  # core1 appears twice  # Map a function that uses both structure and index simap_chr(structures, function(g, i) paste0(\"Structure_\", i, \"_vcount_\", igraph::vcount(g))) #> [1] \"Structure_1_vcount_2\" \"Structure_2_vcount_5\" \"Structure_3_vcount_2\"  # Use purrr-style lambda functions   simap_chr(structures, ~ paste0(\"Pos\", .y, \"_vertices\", igraph::vcount(.x))) #> [1] \"Pos1_vertices2\" \"Pos2_vertices5\" \"Pos3_vertices2\""},{"path":"https://glycoverse.github.io/glyrepr/reference/smap.html","id":null,"dir":"Reference","previous_headings":"","what":"Map Functions Over Glycan Structure Vectors — smap","title":"Map Functions Over Glycan Structure Vectors — smap","text":"functions apply function unique structure glycan structure vector, taking advantage hash-based deduplication avoid redundant computation. Similar purrr mapping functions, optimized glycan structure vectors.","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/smap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map Functions Over Glycan Structure Vectors — smap","text":"","code":"smap(.x, .f, ..., .parallel = FALSE)  smap_vec(.x, .f, ..., .ptype = NULL, .parallel = FALSE)  smap_lgl(.x, .f, ..., .parallel = FALSE)  smap_int(.x, .f, ..., .parallel = FALSE)  smap_dbl(.x, .f, ..., .parallel = FALSE)  smap_chr(.x, .f, ..., .parallel = FALSE)  smap_structure(.x, .f, ..., .parallel = FALSE)"},{"path":"https://glycoverse.github.io/glyrepr/reference/smap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map Functions Over Glycan Structure Vectors — smap","text":".x glycan structure vector (glyrepr_structure). .f function takes igraph object returns result. Can function, purrr-style lambda (~ .x$attr), character string naming function. ... Additional arguments passed .f. .parallel Logical; whether use parallel processing. FALSE (default), parallel processing disabled. Set TRUE enable parallel processing. .ptype prototype return type (smap_vec).","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/smap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Map Functions Over Glycan Structure Vectors — smap","text":"smap(): list smap_vec(): atomic vector type specified .ptype smap_lgl/int/dbl/chr(): Atomic vectors corresponding type smap_structure(): new glyrepr_structure object","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/smap.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Map Functions Over Glycan Structure Vectors — smap","text":"functions compute .f unique structure, map results back original vector positions. much efficient applying .f element individually duplicate structures. Return Types: smap(): Returns list length .x smap_vec(): Returns atomic vector length .x smap_lgl(): Returns logical vector smap_int(): Returns integer vector smap_dbl(): Returns double vector smap_chr(): Returns character vector smap_structure(): Returns new glycan structure vector (.f must return igraph objects)","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/smap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Map Functions Over Glycan Structure Vectors — smap","text":"","code":"# Create a structure vector with duplicates core1 <- o_glycan_core_1() core2 <- n_glycan_core() structures <- glycan_structure(core1, core2, core1)  # core1 appears twice  # Map a function that counts vertices - only computed twice, not three times smap_int(structures, igraph::vcount) #> [1] 2 5 2  # Map a function that returns logical smap_lgl(structures, function(g) igraph::vcount(g) > 5) #> [1] FALSE FALSE FALSE  # Use purrr-style lambda functions   smap_int(structures, ~ igraph::vcount(.x)) #> [1] 2 5 2 smap_lgl(structures, ~ igraph::vcount(.x) > 5) #> [1] FALSE FALSE FALSE  # Map a function that modifies structure (must return igraph) add_vertex_names <- function(g) {   if (!(\"name\" %in% igraph::vertex_attr_names(g))) {     igraph::set_vertex_attr(g, \"name\", value = paste0(\"v\", seq_len(igraph::vcount(g))))   } else {     g   } } smap_structure(structures, add_vertex_names) #> <glycan_structure[3]> #> [1] Gal(b1-3)GalNAc(a1- #> [2] Man(a1-3)[Man(a1-6)]Man(b1-4)GlcNAc(b1-4)GlcNAc(b1- #> [3] Gal(b1-3)GalNAc(a1- #> # Unique structures: 2"},{"path":"https://glycoverse.github.io/glyrepr/reference/smap2.html","id":null,"dir":"Reference","previous_headings":"","what":"Map Functions Over Two Glycan Structure Vectors — smap2","title":"Map Functions Over Two Glycan Structure Vectors — smap2","text":"functions apply function unique structure combination two glycan structure vectors, taking advantage hash-based deduplication avoid redundant computation. Similar purrr map2 functions, optimized glycan structure vectors.","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/smap2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map Functions Over Two Glycan Structure Vectors — smap2","text":"","code":"smap2(.x, .y, .f, ..., .parallel = FALSE)  smap2_vec(.x, .y, .f, ..., .ptype = NULL, .parallel = FALSE)  smap2_lgl(.x, .y, .f, ..., .parallel = FALSE)  smap2_int(.x, .y, .f, ..., .parallel = FALSE)  smap2_dbl(.x, .y, .f, ..., .parallel = FALSE)  smap2_chr(.x, .y, .f, ..., .parallel = FALSE)  smap2_structure(.x, .y, .f, ..., .parallel = FALSE)"},{"path":"https://glycoverse.github.io/glyrepr/reference/smap2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map Functions Over Two Glycan Structure Vectors — smap2","text":".x glycan structure vector (glyrepr_structure). .y vector length .x, length 1 (recycled). .f function takes igraph object (.x) value (.y) returns result. Can function, purrr-style lambda (~ .x + .y), character string naming function. ... Additional arguments passed .f. .parallel Logical; whether use parallel processing. FALSE (default), parallel processing disabled. Set TRUE enable parallel processing. See examples smap set use parallel processing. .ptype prototype return type (smap2_vec).","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/smap2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Map Functions Over Two Glycan Structure Vectors — smap2","text":"smap2(): list smap2_vec(): atomic vector type specified .ptype smap2_lgl/int/dbl/chr(): Atomic vectors corresponding type smap2_structure(): new glyrepr_structure object","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/smap2.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Map Functions Over Two Glycan Structure Vectors — smap2","text":"functions compute .f unique combination structure corresponding .y value, map results back original vector positions. much efficient applying .f element pair individually duplicate structure-value combinations. Return Types: smap2(): Returns list length .x smap2_vec(): Returns atomic vector length .x smap2_lgl(): Returns logical vector smap2_int(): Returns integer vector smap2_dbl(): Returns double vector smap2_chr(): Returns character vector smap2_structure(): Returns new glycan structure vector (.f must return igraph objects)","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/smap2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Map Functions Over Two Glycan Structure Vectors — smap2","text":"","code":"# Create structure vectors with duplicates core1 <- o_glycan_core_1() core2 <- n_glycan_core() structures <- glycan_structure(core1, core2, core1)  # core1 appears twice weights <- c(1.0, 2.0, 1.0)  # corresponding weights  # Map a function that uses both structure and weight smap2_dbl(structures, weights, function(g, w) igraph::vcount(g) * w) #> [1]  2 10  2  # Use purrr-style lambda functions   smap2_dbl(structures, weights, ~ igraph::vcount(.x) * .y) #> [1]  2 10  2  # Test with recycling (single weight for all structures) smap2_dbl(structures, 2.5, ~ igraph::vcount(.x) * .y) #> [1]  5.0 12.5  5.0  # Map a function that modifies structure based on second argument # This example adds a graph attribute instead of modifying topology add_weight_attr <- function(g, weight) {   igraph::set_graph_attr(g, \"weight\", weight) } weights_to_add <- c(1.5, 2.5, 1.5) smap2_structure(structures, weights_to_add, add_weight_attr) #> <glycan_structure[3]> #> [1] Gal(b1-3)GalNAc(a1- #> [2] Man(a1-3)[Man(a1-6)]Man(b1-4)GlcNAc(b1-4)GlcNAc(b1- #> [3] Gal(b1-3)GalNAc(a1- #> # Unique structures: 2"},{"path":"https://glycoverse.github.io/glyrepr/reference/smap_predicates.html","id":null,"dir":"Reference","previous_headings":"","what":"Test Predicates on Glycan Structure Vectors — smap_predicates","title":"Test Predicates on Glycan Structure Vectors — smap_predicates","text":"functions test predicates unique structures glycan structure vector, taking advantage hash-based deduplication avoid redundant computation. Similar purrr predicate functions, optimized glycan structure vectors.","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/smap_predicates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test Predicates on Glycan Structure Vectors — smap_predicates","text":"","code":"ssome(.x, .p, ...)  severy(.x, .p, ...)  snone(.x, .p, ...)"},{"path":"https://glycoverse.github.io/glyrepr/reference/smap_predicates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test Predicates on Glycan Structure Vectors — smap_predicates","text":".x glycan structure vector (glyrepr_structure). .p predicate function takes igraph object returns logical value. Can function, purrr-style lambda (~ .x$attr), character string naming function. ... Additional arguments passed .p.","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/smap_predicates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test Predicates on Glycan Structure Vectors — smap_predicates","text":"single logical value.","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/smap_predicates.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Test Predicates on Glycan Structure Vectors — smap_predicates","text":"functions evaluate .p unique structure, making much efficient applying .p element individually duplicate structures. Return Values: ssome(): Returns TRUE least one unique structure satisfies predicate severy(): Returns TRUE unique structures satisfy predicate snone(): Returns TRUE unique structures satisfy predicate","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/smap_predicates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test Predicates on Glycan Structure Vectors — smap_predicates","text":"","code":"# Create a structure vector with duplicates core1 <- o_glycan_core_1() core2 <- n_glycan_core() structures <- glycan_structure(core1, core2, core1)  # core1 appears twice  # Test if some structures have more than 5 vertices ssome(structures, function(g) igraph::vcount(g) > 5) #> [1] FALSE  # Test if all structures have at least 3 vertices severy(structures, function(g) igraph::vcount(g) >= 3) #> [1] FALSE  # Test if no structures have more than 20 vertices snone(structures, function(g) igraph::vcount(g) > 20) #> [1] TRUE  # Use purrr-style lambda functions ssome(structures, ~ igraph::vcount(.x) > 5) #> [1] FALSE severy(structures, ~ igraph::vcount(.x) >= 3) #> [1] FALSE snone(structures, ~ igraph::vcount(.x) > 20) #> [1] TRUE"},{"path":"https://glycoverse.github.io/glyrepr/reference/smap_unique.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply Function to Unique Structures Only — smap_unique","title":"Apply Function to Unique Structures Only — smap_unique","text":"Apply function unique structures glycan structure vector, returning results order unique structures appear. useful need perform expensive computations care unique results.","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/smap_unique.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply Function to Unique Structures Only — smap_unique","text":"","code":"smap_unique(.x, .f, ..., .parallel = FALSE)"},{"path":"https://glycoverse.github.io/glyrepr/reference/smap_unique.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply Function to Unique Structures Only — smap_unique","text":".x glycan structure vector (glyrepr_structure). .f function takes igraph object returns result. Can function, purrr-style lambda (~ .x$attr), character string naming function. ... Additional arguments passed .f. .parallel Logical; whether use parallel processing. FALSE (default), parallel processing disabled. Set TRUE enable parallel processing. See examples smap set use parallel processing.","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/smap_unique.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply Function to Unique Structures Only — smap_unique","text":"list results unique structure, named hash codes.","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/smap_unique.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply Function to Unique Structures Only — smap_unique","text":"","code":"# Create a structure vector with duplicates core1 <- o_glycan_core_1() structures <- glycan_structure(core1, core1, core1)  # same structure 3 times  # Only compute once for the unique structure unique_results <- smap_unique(structures, igraph::vcount) length(unique_results)  # 1, not 3 #> [1] 1  # Use purrr-style lambda unique_results2 <- smap_unique(structures, ~ igraph::vcount(.x)) length(unique_results2)  # 1, not 3 #> [1] 1"},{"path":"https://glycoverse.github.io/glyrepr/reference/spmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Map Functions Over Glycan Structure Vectors and Multiple Arguments — spmap","title":"Map Functions Over Glycan Structure Vectors and Multiple Arguments — spmap","text":"functions apply function unique structure glycan structure vector along corresponding elements multiple vectors, taking advantage hash-based deduplication avoid redundant computation. Similar purrr pmap functions, optimized glycan structure vectors.","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/spmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map Functions Over Glycan Structure Vectors and Multiple Arguments — spmap","text":"","code":"spmap(.l, .f, ..., .parallel = FALSE)  spmap_vec(.l, .f, ..., .ptype = NULL, .parallel = FALSE)  spmap_lgl(.l, .f, ..., .parallel = FALSE)  spmap_int(.l, .f, ..., .parallel = FALSE)  spmap_dbl(.l, .f, ..., .parallel = FALSE)  spmap_chr(.l, .f, ..., .parallel = FALSE)  spmap_structure(.l, .f, ..., .parallel = FALSE)"},{"path":"https://glycoverse.github.io/glyrepr/reference/spmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map Functions Over Glycan Structure Vectors and Multiple Arguments — spmap","text":".l list first element glycan structure vector (glyrepr_structure) remaining elements vectors length length 1 (recycled). .f function takes igraph object (first element .l) values elements, returning result. Can function, purrr-style lambda (~ .x + .y + .z), character string naming function. ... Additional arguments passed .f. .parallel Logical; whether use parallel processing. FALSE (default), parallel processing disabled. Set TRUE enable parallel processing. See examples smap set use parallel processing. .ptype prototype return type (spmap_vec).","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/spmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Map Functions Over Glycan Structure Vectors and Multiple Arguments — spmap","text":"spmap(): list spmap_vec(): atomic vector type specified .ptype spmap_lgl/int/dbl/chr(): Atomic vectors corresponding type spmap_structure(): new glyrepr_structure object","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/spmap.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Map Functions Over Glycan Structure Vectors and Multiple Arguments — spmap","text":"functions compute .f unique combination structure corresponding values vectors, map results back original vector positions. much efficient applying .f element combination individually duplicate combinations. Time Complexity Performance: Performance scales unique combinations arguments rather total vector length. argument vectors highly redundant, performance approaches O(unique_structures). Scaling factor shows time increase vector size increases 20x. Return Types: spmap(): Returns list length input vectors spmap_vec(): Returns atomic vector length input vectors spmap_lgl(): Returns logical vector spmap_int(): Returns integer vector spmap_dbl(): Returns double vector spmap_chr(): Returns character vector spmap_structure(): Returns new glycan structure vector (.f must return igraph objects)","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/spmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Map Functions Over Glycan Structure Vectors and Multiple Arguments — spmap","text":"","code":"# Create structure vectors with duplicates core1 <- o_glycan_core_1() core2 <- n_glycan_core() structures <- glycan_structure(core1, core2, core1)  # core1 appears twice weights <- c(1.0, 2.0, 1.0)  # corresponding weights factors <- c(2, 3, 2)  # corresponding factors  # Map a function that uses structure, weight, and factor spmap_dbl(list(structures, weights, factors),            function(g, w, f) igraph::vcount(g) * w * f) #> [1]  4 30  4  # Use purrr-style lambda functions   spmap_dbl(list(structures, weights, factors), ~ igraph::vcount(..1) * ..2 * ..3) #> [1]  4 30  4  # Test with recycling spmap_dbl(list(structures, 2.0, 3), ~ igraph::vcount(..1) * ..2 * ..3) #> [1] 12 30 12"},{"path":"https://glycoverse.github.io/glyrepr/reference/structure_to_iupac.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Glycan Structure to IUPAC-like Sequence — structure_to_iupac","title":"Convert Glycan Structure to IUPAC-like Sequence — structure_to_iupac","text":"Convert glycan structure sequence representation form mono(linkage)mono, branches represented square brackets []. backbone chosen longest path, branches, linkages ordered lexicographically smaller linkages backbone.","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/structure_to_iupac.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Glycan Structure to IUPAC-like Sequence — structure_to_iupac","text":"","code":"structure_to_iupac(glycan)"},{"path":"https://glycoverse.github.io/glyrepr/reference/structure_to_iupac.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Glycan Structure to IUPAC-like Sequence — structure_to_iupac","text":"glycan glyrepr_structure vector.","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/structure_to_iupac.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Glycan Structure to IUPAC-like Sequence — structure_to_iupac","text":"character vector representing IUPAC sequences.","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/structure_to_iupac.html","id":"sequence-format","dir":"Reference","previous_headings":"","what":"Sequence Format","title":"Convert Glycan Structure to IUPAC-like Sequence — structure_to_iupac","text":"sequence follows format mono(linkage)mono, : mono: monosaccharide name optional substituents (e.g., Glc, GlcNAc, Glc3Me) linkage: glycosidic linkage (e.g., b1-4, a1-3) Branches enclosed square brackets [] Substituents appended directly monosaccharide names (e.g., Glc3Me Glc 3Me substituent)","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/structure_to_iupac.html","id":"backbone-selection","dir":"Reference","previous_headings":"","what":"Backbone Selection","title":"Convert Glycan Structure to IUPAC-like Sequence — structure_to_iupac","text":"backbone selected longest path tree. branches, rule applies recursively.","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/structure_to_iupac.html","id":"linkage-comparison","dir":"Reference","previous_headings":"","what":"Linkage Comparison","title":"Convert Glycan Structure to IUPAC-like Sequence — structure_to_iupac","text":"Linkages compared lexicographically: First anomeric configuration: ? > b > first position: ? > numbers (numerically) Finally second position: ? > numbers (numerically) Smaller linkages placed backbone, larger ones branches.","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/structure_to_iupac.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Glycan Structure to IUPAC-like Sequence — structure_to_iupac","text":"","code":"# Simple linear structure structure_to_iupac(o_glycan_core_1()) #> [1] \"Gal(b1-3)GalNAc(a1-\"  # Branched structure   structure_to_iupac(n_glycan_core()) #> [1] \"Man(a1-3)[Man(a1-6)]Man(b1-4)GlcNAc(b1-4)GlcNAc(b1-\"  # Structure with substituents graph <- igraph::make_graph(~ 1-+2) igraph::V(graph)$mono <- c(\"Glc\", \"GlcNAc\") igraph::V(graph)$sub <- c(\"3Me\", \"6Ac\") igraph::E(graph)$linkage <- \"b1-4\" graph$anomer <- \"a1\" glycan <- glycan_structure(graph) structure_to_iupac(glycan)  # Returns \"GlcNAc6Ac(b1-4)Glc3Me(a1-\" #> [1] \"GlcNAc6Ac(b1-4)Glc3Me(a1-\"  # Vectorized structures structs <- glycan_structure(o_glycan_core_1(), n_glycan_core()) structure_to_iupac(structs) #> [1] \"Gal(b1-3)GalNAc(a1-\"                                 #> [2] \"Man(a1-3)[Man(a1-6)]Man(b1-4)GlcNAc(b1-4)GlcNAc(b1-\""},{"path":"https://glycoverse.github.io/glyrepr/reference/valid_linkages.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if Linkages are Valid — valid_linkages","title":"Check if Linkages are Valid — valid_linkages","text":"Valid linkages form \"a1-2\", \"b1-4\", \"?-1\", etc. Specifically, pattern xy-z: x: anomer, either \"\", \"b\", \"?\". y: first position, either \"1\", \"2\" \"?\". z: second position, either 1-9 digit \"?\". Can also multiple positions separated \"/\", e.g. \"1/2/3\". \"?\" used \"/\".","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/valid_linkages.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if Linkages are Valid — valid_linkages","text":"","code":"valid_linkages(linkages)"},{"path":"https://glycoverse.github.io/glyrepr/reference/valid_linkages.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if Linkages are Valid — valid_linkages","text":"linkages character vector linkages.","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/valid_linkages.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if Linkages are Valid — valid_linkages","text":"logical vector.","code":""},{"path":"https://glycoverse.github.io/glyrepr/reference/valid_linkages.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if Linkages are Valid — valid_linkages","text":"","code":"# Valid linkages valid_linkages(c(\"a1-2\", \"?1-4\", \"a?-1\", \"b?-?\", \"??-?\", \"a1/2-3\")) #> [1]  TRUE  TRUE  TRUE  TRUE  TRUE FALSE  # Invalid linkages valid_linkages(c(\"a1-2/?\", \"1-4\", \"a/b1-2\", \"c1-2\", \"a9-1\")) #> [1] FALSE FALSE FALSE FALSE FALSE"},{"path":[]},{"path":"https://glycoverse.github.io/glyrepr/news/index.html","id":"glyrepr-074","dir":"Changelog","previous_headings":"","what":"glyrepr 0.7.4","title":"glyrepr 0.7.4","text":"CRAN release: 2025-09-23","code":""},{"path":"https://glycoverse.github.io/glyrepr/news/index.html","id":"minor-improvements-and-bug-fixes-0-7-4","dir":"Changelog","previous_headings":"","what":"Minor improvements and bug fixes","title":"glyrepr 0.7.4","text":"Update package title description. Remove parallel examples smap().","code":""},{"path":[]},{"path":"https://glycoverse.github.io/glyrepr/news/index.html","id":"minor-improvements-and-bug-fixes-0-7-3","dir":"Changelog","previous_headings":"","what":"Minor improvements and bug fixes","title":"glyrepr 0.7.3","text":"Fix typos documentation. Add examples functions. Prepare release CRAN.","code":""},{"path":[]},{"path":"https://glycoverse.github.io/glyrepr/news/index.html","id":"minor-improvements-and-bug-fixes-0-7-2","dir":"Changelog","previous_headings":"","what":"Minor improvements and bug fixes","title":"glyrepr 0.7.2","text":"Fix bug structure_to_iupac() returns incorrect sequences incorrect backbone branch order.","code":""},{"path":[]},{"path":"https://glycoverse.github.io/glyrepr/news/index.html","id":"minor-improvements-and-bug-fixes-0-7-1","dir":"Changelog","previous_headings":"","what":"Minor improvements and bug fixes","title":"glyrepr 0.7.1","text":"Fix bug smap2(), spmap(), related functions return unexpected results input y list. Improve documentation glycan_structure(), including new behavior vertex edge order introduced 0.7.0.","code":""},{"path":[]},{"path":"https://glycoverse.github.io/glyrepr/news/index.html","id":"breaking-changes-0-7-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"glyrepr 0.7.0","text":"convert_mono_type() now replaced convert_to_generic(). convert_mono_type() created three monosaccharide types existed: “concrete”, “generic”, “simple”. “simple” removed, old convert_mono_type() seems redundant, valid conversion “concrete” “generic” now. Therefore, remove function now add straightforward convert_to_generic(). parameter removed, indexing can done manually input glyrepr_structure vector returned list easily. Add return_list parameter control return type. parameter makes function “type-stable”. glycan_structure() as_glycan_structure() now reorder underlying graphs line IUPAC-style sequence. example, vertex order “Gal(b1-3)[GlcNAc(b1-6)]GalNAc(b1-” always 1. Gal, 2. GlcNAc, 3. GalNAc, edges b1-3, b1-6, matter original graphs . Users can assign indices vertices edges easily printing structure console. update makes glymotif::match_motif() meaningful.","code":""},{"path":"https://glycoverse.github.io/glyrepr/news/index.html","id":"new-features-0-7-0","dir":"Changelog","previous_headings":"","what":"New features","title":"glyrepr 0.7.0","text":"glyrepr_structure colors now tibbles printed console.","code":""},{"path":"https://glycoverse.github.io/glyrepr/news/index.html","id":"minor-improvements-and-bug-fixes-0-7-0","dir":"Changelog","previous_headings":"","what":"Minor improvements and bug fixes","title":"glyrepr 0.7.0","text":"Fix bug monosaccharides substituents colored glycan_structure() printed console. example, “Neu5Ac” part “Neu5Ac9Ac(a2-” printed black. Now printed purple, “9Ac” part remains black. Fix bug Neu5Ac Neu5Gc substituents position 2, 3, 4 correctly parsed. Now, complex patterns like “Neu4Ac5Ac9Ac” can properly handled, “Neu5Ac” monosaccharide “4Ac,9Ac” substituents.","code":""},{"path":[]},{"path":"https://glycoverse.github.io/glyrepr/news/index.html","id":"minor-improvements-and-bug-fixes-0-6-1","dir":"Changelog","previous_headings":"","what":"Minor improvements and bug fixes","title":"glyrepr 0.6.1","text":"n_glycan_core() now “b1” reducing end anomer, “?1”. Add validation glycan_structure() ensure duplicated linkage positions. example, “Gal(b1-3)[Fuc(a1-3)]GalNAc(b1-” invalid now becuase “Gal” “Fuc” linked “GalNAc” position 3. Add descriptions ambiguous linkages anomers glycan_structure() documentation. remove_linkages() now also removes reducing end anomers. n_glycan_core(), o_glycan_core_1(), o_glycan_core_2() now “??” anomers linkage = FALSE. Fix bug smap_structure(), smap2_structure(), spmap_structure(), simap_structure() modifying structures can create identical structures, unique structures updated correctly. automatically fixes similar bug remove_linkages().","code":""},{"path":[]},{"path":"https://glycoverse.github.io/glyrepr/news/index.html","id":"breaking-changes-0-6-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"glyrepr 0.6.0","text":"Remove “alditol” attribute glycan_structure() objects. information rarely used glycomics glycoproteomics data analysis. removed according razor principle. as_glycan_structure() now doesn’t allow input IUPAC-condensed strings omit anomer information. Previously, something like “Glc(a1-3)GlcNAc” valid. as_glycan_structure() assumed core “GlcNAc” “?1-” anomer added automatically. problem behavior easily awared users might cause confusion. , less , remove .","code":""},{"path":[]},{"path":"https://glycoverse.github.io/glyrepr/news/index.html","id":"minor-improvements-and-bug-fixes-0-5-2","dir":"Changelog","previous_headings":"","what":"Minor improvements and bug fixes","title":"glyrepr 0.5.2","text":"Fix error message format errors. Update abbreviated type name glyrepr_structure structure struct.","code":""},{"path":[]},{"path":"https://glycoverse.github.io/glyrepr/news/index.html","id":"major-changes-0-5-0","dir":"Changelog","previous_headings":"","what":"Major changes","title":"glyrepr 0.5.0","text":"Glycan structures now support multiple substituents single monosaccharide. Substituents stored comma-separated strings internally concatenated IUPAC format display. Glycan compositions now support substituents. glycan_composition class can now represent count substituents alongside monosaccharides.","code":""}]
